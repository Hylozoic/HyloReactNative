// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NotificationsList matches the last snapshot 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <View
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        [
          {
            "backgroundColor": "rgb(242, 242, 242)",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        onLayout={[Function]}
        style={
          {
            "flex": 1,
          }
        }
      >
        <View
          pointerEvents="box-none"
          style={
            {
              "bottom": 0,
              "left": 0,
              "position": "absolute",
              "right": 0,
              "top": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "opacity": 1,
              }
            }
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            collapsable={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              [
                {
                  "display": "flex",
                  "overflow": undefined,
                },
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              {
                "close": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": {
                  "animation": "spring",
                  "config": {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "flex": 1,
                }
              }
            >
              <View
                collapsable={false}
                handlerTag={1}
                handlerType="PanGestureHandler"
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                style={
                  {
                    "flex": 1,
                    "transform": [
                      {
                        "translateX": 0,
                      },
                      {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <View
                  pointerEvents="box-none"
                  style={
                    [
                      {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      [
                        {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View>
                        <View>
                          <View>
                            <View>
                              <ActivityIndicator
                                accessibilityHint="loading"
                                color="#818A88"
                                size="small"
                              />
                            </View>
                          </View>
                        </View>
                        <RCTScrollView
                          data={
                            [
                              {
                                "activityId": "1",
                                "actor": {
                                  "avatarUrl": "https://example.com/1.png",
                                  "name": "Foo Bar",
                                },
                                "avatarSeparator": false,
                                "createdAt": "",
                                "id": "1",
                                "reasons": [
                                  "newComment",
                                ],
                                "unread": true,
                              },
                            ]
                          }
                          getItem={[Function]}
                          getItemCount={[Function]}
                          keyExtractor={[Function]}
                          onContentSizeChange={[Function]}
                          onEndReached={null}
                          onLayout={[Function]}
                          onMomentumScrollBegin={[Function]}
                          onMomentumScrollEnd={[Function]}
                          onScroll={[Function]}
                          onScrollBeginDrag={[Function]}
                          onScrollEndDrag={[Function]}
                          removeClippedSubviews={false}
                          renderItem={[Function]}
                          scrollEventThrottle={0.0001}
                          stickyHeaderIndices={[]}
                          viewabilityConfigCallbackPairs={[]}
                        >
                          <View>
                            <View
                              onFocusCapture={[Function]}
                              onLayout={[Function]}
                            >
                              <View>
                                <View
                                  accessibilityState={
                                    {
                                      "busy": undefined,
                                      "checked": undefined,
                                      "disabled": undefined,
                                      "expanded": undefined,
                                      "selected": undefined,
                                    }
                                  }
                                  accessibilityValue={
                                    {
                                      "max": undefined,
                                      "min": undefined,
                                      "now": undefined,
                                      "text": undefined,
                                    }
                                  }
                                  accessible={true}
                                  collapsable={false}
                                  focusable={true}
                                  onClick={[Function]}
                                  onResponderGrant={[Function]}
                                  onResponderMove={[Function]}
                                  onResponderRelease={[Function]}
                                  onResponderTerminate={[Function]}
                                  onResponderTerminationRequest={[Function]}
                                  onStartShouldSetResponder={[Function]}
                                >
                                  <View>
                                    <View>
                                      <View>
                                        <View
                                          style={
                                            [
                                              {
                                                "overflow": "hidden",
                                              },
                                              undefined,
                                            ]
                                          }
                                        >
                                          <FastImageView
                                            defaultSource={null}
                                            resizeMode="cover"
                                            source={
                                              {
                                                "uri": "https://example.com/1.png",
                                              }
                                            }
                                            style={
                                              {
                                                "bottom": 0,
                                                "left": 0,
                                                "position": "absolute",
                                                "right": 0,
                                                "top": 0,
                                              }
                                            }
                                          />
                                        </View>
                                      </View>
                                    </View>
                                    <View>
                                      <Text
                                        numberOfLines={2}
                                      >
                                        <Text>
                                          ● 
                                        </Text>
                                        <Text />
                                      </Text>
                                      <Text>
                                        <Text>
                                          Foo 
                                        </Text>
                                      </Text>
                                      <Text />
                                    </View>
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </RCTScrollView>
                      </View>
                    </View>
                    <View
                      collapsable={false}
                      pointerEvents="box-none"
                      style={{}}
                    >
                      <View
                        accessibilityElementsHidden={false}
                        importantForAccessibility="auto"
                        onLayout={[Function]}
                        pointerEvents="box-none"
                        style={null}
                      >
                        <View
                          collapsable={false}
                          pointerEvents="box-none"
                          style={
                            {
                              "bottom": 0,
                              "left": 0,
                              "position": "absolute",
                              "right": 0,
                              "top": 0,
                              "zIndex": 0,
                            }
                          }
                        >
                          <View
                            collapsable={false}
                            style={
                              {
                                "backgroundColor": "#eaecee",
                                "borderBottomColor": "rgb(216, 216, 216)",
                                "flex": 1,
                                "shadowColor": "rgb(216, 216, 216)",
                                "shadowOffset": {
                                  "height": 0.5,
                                  "width": 0,
                                },
                                "shadowOpacity": 0.85,
                                "shadowRadius": 0,
                              }
                            }
                          />
                        </View>
                        <View
                          collapsable={false}
                          pointerEvents="box-none"
                          style={
                            {
                              "height": 44,
                              "maxHeight": undefined,
                              "minHeight": undefined,
                              "opacity": undefined,
                              "transform": undefined,
                            }
                          }
                        >
                          <View
                            pointerEvents="none"
                            style={
                              {
                                "height": 0,
                              }
                            }
                          />
                          <View
                            pointerEvents="box-none"
                            style={
                              {
                                "alignItems": "stretch",
                                "flex": 1,
                                "flexDirection": "row",
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              pointerEvents="box-none"
                              style={
                                {
                                  "alignItems": "flex-start",
                                  "flexBasis": 0,
                                  "flexGrow": 1,
                                  "justifyContent": "center",
                                  "marginStart": 0,
                                }
                              }
                            >
                              <View
                                accessibilityState={
                                  {
                                    "busy": undefined,
                                    "checked": undefined,
                                    "disabled": undefined,
                                    "expanded": undefined,
                                    "selected": undefined,
                                  }
                                }
                                accessibilityValue={
                                  {
                                    "max": undefined,
                                    "min": undefined,
                                    "now": undefined,
                                    "text": undefined,
                                  }
                                }
                                accessible={true}
                                collapsable={false}
                                focusable={true}
                                hitSlop={
                                  {
                                    "bottom": 7,
                                    "left": 7,
                                    "right": 7,
                                    "top": 7,
                                  }
                                }
                                onClick={[Function]}
                                onResponderGrant={[Function]}
                                onResponderMove={[Function]}
                                onResponderRelease={[Function]}
                                onResponderTerminate={[Function]}
                                onResponderTerminationRequest={[Function]}
                                onStartShouldSetResponder={[Function]}
                              >
                                <Icon
                                  color="#283a50"
                                  name="Ex"
                                />
                              </View>
                            </View>
                            <View
                              collapsable={false}
                              pointerEvents="box-none"
                              style={
                                {
                                  "justifyContent": "center",
                                  "marginHorizontal": 16,
                                  "maxWidth": 160,
                                }
                              }
                            >
                              <Text
                                accessibilityRole="header"
                                aria-level="1"
                                collapsable={false}
                                numberOfLines={1}
                                style={
                                  {
                                    "color": "#283a50",
                                    "fontFamily": "Circular-Bold",
                                    "fontSize": 17,
                                    "fontWeight": "600",
                                  }
                                }
                              >
                                Notifications
                              </Text>
                            </View>
                            <View
                              collapsable={false}
                              pointerEvents="box-none"
                              style={
                                {
                                  "alignItems": "flex-end",
                                  "flexBasis": 0,
                                  "flexGrow": 1,
                                  "justifyContent": "center",
                                  "marginEnd": 0,
                                }
                              }
                            >
                              <View
                                accessibilityState={
                                  {
                                    "busy": undefined,
                                    "checked": undefined,
                                    "disabled": false,
                                    "expanded": undefined,
                                    "selected": undefined,
                                  }
                                }
                                accessibilityValue={
                                  {
                                    "max": undefined,
                                    "min": undefined,
                                    "now": undefined,
                                    "text": undefined,
                                  }
                                }
                                accessible={true}
                                collapsable={false}
                                focusable={true}
                                hitSlop={
                                  {
                                    "bottom": 7,
                                    "left": 7,
                                    "right": 7,
                                    "top": 7,
                                  }
                                }
                                onClick={[Function]}
                                onResponderGrant={[Function]}
                                onResponderMove={[Function]}
                                onResponderRelease={[Function]}
                                onResponderTerminate={[Function]}
                                onResponderTerminationRequest={[Function]}
                                onStartShouldSetResponder={[Function]}
                              >
                                <Text>
                                  Mark as read
                                </Text>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
      <View
        collapsable={false}
        pointerEvents="box-none"
        style={
          {
            "height": 44,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
            "zIndex": 1,
          }
        }
      />
    </View>
  </View>
</View>
`;
