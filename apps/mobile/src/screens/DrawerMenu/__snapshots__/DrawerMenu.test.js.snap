// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DrawerMenu matches the last snapshot 1`] = `
<SafeAreaProvider>
  <TRenderEngineProvider
    baseStyle={
      {
        "fontSize": 14,
      }
    }
    classesStyles={{}}
    customHTMLElementModels={{}}
    emSize={14}
    enableCSSInlineProcessing={true}
    enableUserAgentStyles={true}
    fallbackFonts={
      {
        "monospace": "Menlo",
        "sans-serif": "system",
        "serif": "Times New Roman",
      }
    }
    htmlParserOptions={
      {
        "decodeEntities": true,
      }
    }
    ignoredDomTags={[]}
    ignoredStyles={[]}
    systemFonts={
      [
        "San Francisco",
        "Arial",
        "ArialHebrew",
        "Avenir",
        "Baskerville",
        "Bodoni 72",
        "Bradley Hand",
        "Chalkboard SE",
        "Cochin",
        "Copperplate",
        "Courier",
        "Courier New",
        "Damascus",
        "Didot",
        "Futura",
        "Geeza Pro",
        "Georgia",
        "Gill Sans",
        "Helvetica",
        "Helvetica Neue",
        "Hiragino Sans",
        "Hoefler Text",
        "Iowan Old Style",
        "Kailasa",
        "Khmer Sangam MN",
        "Marker Felt",
        "Menlo",
        "Mishafi",
        "Noteworthy",
        "Optima",
        "Palatino",
        "Papyrus",
        "Savoye LET",
        "Symbol",
        "Thonburi",
        "Times New Roman",
        "Trebuchet MS",
        "Verdana",
        "Zapf Dingbats",
        "Zapfino",
      ]
    }
    tagsStyles={{}}
  >
    <Provider
      store={
        {
          "dispatch": [MockFunction],
          "getState": [MockFunction],
          "subscribe": [MockFunction],
        }
      }
    >
      <HyloHTMLConfigProvider>
        <ForwardRef(NavigationContainerInner)>
          <DrawerMenu
            avatarUrl="http://anyurl"
            currentGroup={
              {
                "avatarUrl": "someurl",
                "name": "foo",
              }
            }
            currentGroupId={12}
            goToGroup={[Function]}
            goToGroupSettings={[MockFunction]}
            goToMyProfile={[Function]}
            groups={
              [
                {
                  "id": 2,
                  "name": "Group",
                },
              ]
            }
            memberships={[]}
            name="Roy Rogers"
            networks={
              [
                {
                  "id": 1,
                  "name": "Network",
                },
              ]
            }
            showSettings={[Function]}
          />
        </ForwardRef(NavigationContainerInner)>
      </HyloHTMLConfigProvider>
    </Provider>
  </TRenderEngineProvider>
</SafeAreaProvider>
`;

exports[`GroupRow hides badge when no newPostCount 1`] = `
<View>
  <TouchableOpacity
    onPress={[Function]}
  >
    <FastImage
      source={
        {
          "uri": "foo.png",
        }
      }
    />
    <Text
      ellipsizeMode="tail"
      numberOfLines={1}
    >
      Foom
    </Text>
  </TouchableOpacity>
</View>
`;

exports[`GroupRow highlights when matching currentGroupId 1`] = `
<View>
  <TouchableOpacity
    onPress={[Function]}
  >
    <FastImage
      source={
        {
          "uri": "foo.png",
        }
      }
    />
    <Text
      ellipsizeMode="tail"
      numberOfLines={1}
    >
      Foom
    </Text>
  </TouchableOpacity>
</View>
`;

exports[`GroupRow matches the last snapshot 1`] = `
<View>
  <TouchableOpacity
    onPress={[Function]}
  >
    <FastImage
      source={
        {
          "uri": "foo.png",
        }
      }
    />
    <Text
      ellipsizeMode="tail"
      numberOfLines={1}
    >
      Foom
    </Text>
    <View>
      <Text>
        7
      </Text>
    </View>
  </TouchableOpacity>
</View>
`;

exports[`SectionHeader matches the last snapshot 1`] = `
<View>
  <Text>
    NETWORKED GROUPS
  </Text>
</View>
`;

exports[`TextButton renders 1`] = `
<TouchableOpacity
  hitSlop={
    {
      "bottom": 10,
      "left": 10,
      "right": 15,
      "top": 20,
    }
  }
  onPress={[Function]}
>
  <Text>
    anything
  </Text>
</TouchableOpacity>
`;
