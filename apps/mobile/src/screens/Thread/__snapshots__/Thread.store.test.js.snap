// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createMessage should match the last snapshot 1`] = `
{
  "graphql": {
    "query": "mutation CreateMessageMutation($messageThreadId: String, $text: String, $createdAt: Date) {
        createMessage(
          data: {messageThreadId: $messageThreadId, text: $text, createdAt: $createdAt}
        ) {
          id
          text
          createdAt
          creator {
            id
            name
            avatarUrl
          }
          messageThread {
            id
            createdAt
            updatedAt
            participants {
              id
              name
              avatarUrl
            }
          }
        }
      }",
    "variables": {
      "messageThreadId": "1",
      "optimistic": true,
      "text": "So much message.",
    },
  },
  "meta": {
    "analytics": "Direct Message Sent",
    "extractModel": "Message",
    "forNewThread": undefined,
    "messageText": "So much message.",
    "messageThreadId": "1",
    "optimistic": true,
    "tempId": "messageThread1_1",
  },
  "type": "Thread/CREATE_MESSAGE",
}
`;

exports[`fetchMessages should match the last snapshot 1`] = `
{
  "graphql": {
    "query": "query MessageThreadMessagesQuery($id: ID, $cursor: ID, $messagePageSize: Int = 20) {
        messageThread(id: $id) {
          id
          messages(first: $messagePageSize, cursor: $cursor, order: \\"desc\\") {
            hasMore
            total
            items {
              createdAt
              id
              text
              creator {
                id
                name
                avatarUrl
              }
            }
          }
          participants {
            avatarUrl
            id
            name
          }
        }
      }",
    "variables": {
      "cursor": 10,
      "id": "1",
      "messagePageSize": 20,
    },
  },
  "meta": {
    "afterInteractions": true,
    "extractModel": "MessageThread",
    "extractQueryResults": {
      "getItems": [Function],
    },
    "id": "1",
    "reset": undefined,
  },
  "type": "Thread/FETCH_MESSAGES",
}
`;

exports[`getThread should match the last snapshot 1`] = `
SessionBoundModel {
  "_fields": {
    "id": "1",
  },
}
`;

exports[`updateThreadReadTime should match the last snapshot 1`] = `
{
  "meta": {
    "id": "1",
  },
  "payload": {
    "api": {
      "method": "POST",
      "path": "/noo/post/1/update-last-read",
    },
  },
  "type": "Thread/UPDATE_THREAD_READ_TIME",
}
`;
