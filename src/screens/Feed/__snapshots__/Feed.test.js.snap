// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`calls fetchGroupTopic on componentDidMount 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(242, 242, 242)",
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      collapsable={false}
      pointerEvents="box-none"
    >
      <View
        accessibilityElementsHidden={false}
        importantForAccessibility="auto"
        onLayout={[Function]}
        pointerEvents="box-none"
        style={null}
      >
        <View
          collapsable={false}
          pointerEvents="box-none"
        >
          <View
            collapsable={false}
          />
        </View>
        <View
          collapsable={false}
          pointerEvents="box-none"
        >
          <View
            pointerEvents="none"
            style={
              Object {
                "height": 0,
              }
            }
          />
          <View
            pointerEvents="box-none"
            style={
              Object {
                "alignItems": "stretch",
                "flex": 1,
                "flexDirection": "row",
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
            />
            <View
              collapsable={false}
              pointerEvents="box-none"
            >
              <Text
                accessibilityRole="header"
                aria-level="1"
                collapsable={false}
                numberOfLines={1}
                onLayout={[Function]}
              >
                All My Groups
              </Text>
            </View>
            <View
              collapsable={false}
              pointerEvents="box-none"
            />
          </View>
        </View>
      </View>
    </View>
    <RNSScreenContainer
      onLayout={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RNSScreen
        activityState={2}
        collapsable={false}
        forwardedRef={[Function]}
        pointerEvents="box-none"
      >
        <View
          collapsable={false}
        />
        <View
          accessibilityElementsHidden={false}
          closing={false}
          gestureVelocityImpact={0.3}
          importantForAccessibility="auto"
          onClose={[Function]}
          onGestureBegin={[Function]}
          onGestureCanceled={[Function]}
          onGestureEnd={[Function]}
          onOpen={[Function]}
          onTransition={[Function]}
          pointerEvents="box-none"
          style={
            Array [
              Object {
                "display": "flex",
                "overflow": undefined,
              },
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              },
            ]
          }
          transitionSpec={
            Object {
              "close": Object {
                "animation": "spring",
                "config": Object {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
              "open": Object {
                "animation": "spring",
                "config": Object {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
            }
          }
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              collapsable={false}
              forwardedRef={[Function]}
              needsOffscreenAlphaCompositing={false}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
            >
              <View
                style={
                  Array [
                    Object {
                      "flex": 1,
                      "overflow": "hidden",
                    },
                    Array [
                      Object {
                        "backgroundColor": "rgb(242, 242, 242)",
                      },
                      undefined,
                    ],
                  ]
                }
              >
                <View
                  style={
                    Object {
                      "flex": 1,
                      "flexDirection": "column-reverse",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                      }
                    }
                  >
                    <View>
                      <ActivityIndicator
                        color="#818A88"
                        size="small"
                      />
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </RNSScreen>
    </RNSScreenContainer>
  </View>
</View>
`;

exports[`renders correctly if currentUserHasMemberships 1`] = `
<Context.Provider
  value={
    Object {
      "options": undefined,
    }
  }
>
  <ThemeProvider
    value={
      Object {
        "colors": Object {
          "background": "rgb(242, 242, 242)",
          "border": "rgb(216, 216, 216)",
          "card": "rgb(255, 255, 255)",
          "notification": "rgb(255, 59, 48)",
          "primary": "rgb(0, 122, 255)",
          "text": "rgb(28, 28, 30)",
        },
        "dark": false,
      }
    }
  >
    <ForwardRef(BaseNavigationContainer)>
      <Feed
        currentUser={
          Object {
            "id": "2",
          }
        }
        currentUserHasMemberships={true}
        editPost={[Function]}
        goToGroup={[Function]}
        group={
          Object {
            "id": "1",
          }
        }
        navigation={Object {}}
        newPost={[Function]}
        route={Object {}}
        showPost={[Function]}
        topicName="amazing"
      />
    </ForwardRef(BaseNavigationContainer)>
  </ThemeProvider>
</Context.Provider>
`;

exports[`renders correctly if currentUserHasMemberships is false 1`] = `
<Context.Provider
  value={
    Object {
      "options": undefined,
    }
  }
>
  <ThemeProvider
    value={
      Object {
        "colors": Object {
          "background": "rgb(242, 242, 242)",
          "border": "rgb(216, 216, 216)",
          "card": "rgb(255, 255, 255)",
          "notification": "rgb(255, 59, 48)",
          "primary": "rgb(0, 122, 255)",
          "text": "rgb(28, 28, 30)",
        },
        "dark": false,
      }
    }
  >
    <ForwardRef(BaseNavigationContainer)>
      <Feed
        currentUser={
          Object {
            "id": "2",
          }
        }
        currentUserHasMemberships={false}
        editPost={[Function]}
        goToGroup={[Function]}
        group={
          Object {
            "id": "1",
          }
        }
        navigation={Object {}}
        newPost={[Function]}
        showPost={[Function]}
        topicName="amazing"
      />
    </ForwardRef(BaseNavigationContainer)>
  </ThemeProvider>
</Context.Provider>
`;
