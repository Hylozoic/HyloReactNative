// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`calls fetchGroupTopic on componentDidMount 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "rgb(242, 242, 242)",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <View
        collapsable={false}
        pointerEvents="box-none"
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              collapsable={false}
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                >
                  Public Groups & Posts
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
              />
            </View>
          </View>
        </View>
      </View>
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={2}
          collapsable={false}
          forwardedRef={[Function]}
          gestureResponseDistance={
            Object {
              "bottom": -1,
              "end": -1,
              "start": -1,
              "top": -1,
            }
          }
          pointerEvents="box-none"
        >
          <View
            collapsable={false}
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
              >
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View>
                        <ActivityIndicator
                          color="#818A88"
                          size="small"
                        />
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
    </View>
  </View>
</View>
`;

exports[`renders correctly if currentUserHasMemberships 1`] = `
<SafeAreaProvider>
  <TRenderEngineProvider
    baseStyle={
      Object {
        "fontSize": 14,
      }
    }
    classesStyles={Object {}}
    customHTMLElementModels={Object {}}
    emSize={14}
    enableCSSInlineProcessing={true}
    enableUserAgentStyles={true}
    fallbackFonts={
      Object {
        "monospace": "Menlo",
        "sans-serif": "system",
        "serif": "Times New Roman",
      }
    }
    htmlParserOptions={
      Object {
        "decodeEntities": true,
      }
    }
    ignoredDomTags={Array []}
    ignoredStyles={Array []}
    systemFonts={
      Array [
        "San Francisco",
        "Arial",
        "ArialHebrew",
        "Avenir",
        "Baskerville",
        "Bodoni 72",
        "Bradley Hand",
        "Chalkboard SE",
        "Cochin",
        "Copperplate",
        "Courier",
        "Courier New",
        "Damascus",
        "Didot",
        "Futura",
        "Geeza Pro",
        "Georgia",
        "Gill Sans",
        "Helvetica",
        "Helvetica Neue",
        "Hiragino Sans",
        "Hoefler Text",
        "Iowan Old Style",
        "Kailasa",
        "Khmer Sangam MN",
        "Marker Felt",
        "Menlo",
        "Mishafi",
        "Noteworthy",
        "Optima",
        "Palatino",
        "Papyrus",
        "Savoye LET",
        "Symbol",
        "Thonburi",
        "Times New Roman",
        "Trebuchet MS",
        "Verdana",
        "Zapf Dingbats",
        "Zapfino",
      ]
    }
    tagsStyles={Object {}}
  >
    <Provider
      store={
        Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction],
          "subscribe": [MockFunction],
        }
      }
    >
      <HlyoHTMLConfigProvider>
        <ForwardRef(NavigationContainerInner)>
          <Feed
            currentUser={
              Object {
                "id": "2",
              }
            }
            currentUserHasMemberships={true}
            editPost={[Function]}
            goToGroup={[Function]}
            group={
              Object {
                "id": "1",
              }
            }
            navigation={Object {}}
            newPost={[Function]}
            route={Object {}}
            showPost={[Function]}
            topicName="amazing"
          />
        </ForwardRef(NavigationContainerInner)>
      </HlyoHTMLConfigProvider>
    </Provider>
  </TRenderEngineProvider>
</SafeAreaProvider>
`;

exports[`renders correctly if currentUserHasMemberships is false 1`] = `
<SafeAreaProvider>
  <TRenderEngineProvider
    baseStyle={
      Object {
        "fontSize": 14,
      }
    }
    classesStyles={Object {}}
    customHTMLElementModels={Object {}}
    emSize={14}
    enableCSSInlineProcessing={true}
    enableUserAgentStyles={true}
    fallbackFonts={
      Object {
        "monospace": "Menlo",
        "sans-serif": "system",
        "serif": "Times New Roman",
      }
    }
    htmlParserOptions={
      Object {
        "decodeEntities": true,
      }
    }
    ignoredDomTags={Array []}
    ignoredStyles={Array []}
    systemFonts={
      Array [
        "San Francisco",
        "Arial",
        "ArialHebrew",
        "Avenir",
        "Baskerville",
        "Bodoni 72",
        "Bradley Hand",
        "Chalkboard SE",
        "Cochin",
        "Copperplate",
        "Courier",
        "Courier New",
        "Damascus",
        "Didot",
        "Futura",
        "Geeza Pro",
        "Georgia",
        "Gill Sans",
        "Helvetica",
        "Helvetica Neue",
        "Hiragino Sans",
        "Hoefler Text",
        "Iowan Old Style",
        "Kailasa",
        "Khmer Sangam MN",
        "Marker Felt",
        "Menlo",
        "Mishafi",
        "Noteworthy",
        "Optima",
        "Palatino",
        "Papyrus",
        "Savoye LET",
        "Symbol",
        "Thonburi",
        "Times New Roman",
        "Trebuchet MS",
        "Verdana",
        "Zapf Dingbats",
        "Zapfino",
      ]
    }
    tagsStyles={Object {}}
  >
    <Provider
      store={
        Object {
          "dispatch": [MockFunction],
          "getState": [MockFunction],
          "subscribe": [MockFunction],
        }
      }
    >
      <HlyoHTMLConfigProvider>
        <ForwardRef(NavigationContainerInner)>
          <Feed
            currentUser={
              Object {
                "id": "2",
              }
            }
            currentUserHasMemberships={false}
            editPost={[Function]}
            goToGroup={[Function]}
            group={
              Object {
                "id": "1",
              }
            }
            navigation={Object {}}
            newPost={[Function]}
            showPost={[Function]}
            topicName="amazing"
          />
        </ForwardRef(NavigationContainerInner)>
      </HlyoHTMLConfigProvider>
    </Provider>
  </TRenderEngineProvider>
</SafeAreaProvider>
`;
