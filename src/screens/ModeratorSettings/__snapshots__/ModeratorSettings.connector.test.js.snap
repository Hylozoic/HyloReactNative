// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mapDispatchToProps creates actions 1`] = `
Object {
  "addModeratorMaker": [Function],
  "clearModeratorSuggestions": [Function],
  "fetchModeratorSuggestionsMaker": [Function],
  "fetchModeratorsMaker": [Function],
  "removeModeratorMaker": [Function],
  "showMember": [Function],
}
`;

exports[`mapDispatchToProps creates actions 2`] = `
Array [
  Array [
    Object {
      "graphql": Object {
        "query": "mutation ($personId: ID, $groupId: ID) {
        addModerator(personId: $personId, groupId: $groupId) {
          id
          moderators (first: 100) {
            items {
              id
              name
              avatarUrl
            }
          }
        }
      }",
        "variables": Object {
          "groupId": 33,
          "personId": 22,
        },
      },
      "meta": Object {
        "groupId": 33,
        "optimistic": true,
        "personId": 22,
      },
      "type": "ModeratorSettings/ADD_MODERATOR",
    },
  ],
  Array [
    Object {
      "graphql": Object {
        "query": "mutation ($personId: ID, $groupId: ID, $isRemoveFromGroup: Boolean) {
        removeModerator(personId: $personId, groupId: $groupId, isRemoveFromGroup: $isRemoveFromGroup) {
          id
          moderators (first: 100) {
            items {
              id
              name
              avatarUrl
            }
          }
        }
      }",
        "variables": Object {
          "groupId": 33,
          "isRemoveFromGroup": true,
          "personId": 22,
        },
      },
      "meta": Object {
        "groupId": 33,
        "isRemoveFromGroup": true,
        "optimistic": true,
        "personId": 22,
      },
      "type": "ModeratorSettings/REMOVE_MODERATOR",
    },
  ],
  Array [
    Object {
      "graphql": Object {
        "query": "query ($id: ID, $autocomplete: String) {
        group (id: $id) {
          id
          members (first: 10, autocomplete: $autocomplete) {
            hasMore
            items {
              id
              name
              avatarUrl
            }
          }
        }
      }",
        "variables": Object {
          "autocomplete": "autocomplete",
          "id": 33,
        },
      },
      "meta": Object {
        "extractModel": "Group",
      },
      "type": "ModeratorSettings/FETCH_MODERATOR_SUGGESTIONS",
    },
  ],
  Array [
    Object {
      "type": "ModeratorSettings/CLEAR_MODERATOR_SUGGESTIONS",
    },
  ],
]
`;

exports[`mapDispatchToProps creates actions 3`] = `
Array [
  Array [
    "Member",
    Object {
      "id": 22,
    },
  ],
]
`;

exports[`mapStateToProps works 1`] = `
Object {
  "currentUser": SessionBoundModel {
    "_fields": Object {
      "id": "1",
    },
    "id": "1",
  },
  "group": SessionBoundModel {
    "_fields": Object {
      "id": "99",
      "slug": "foo",
    },
  },
  "moderatorSuggestions": Array [],
  "moderators": Array [
    SessionBoundModel {
      "_fields": Object {
        "id": "1",
      },
    },
    SessionBoundModel {
      "_fields": Object {
        "id": "2",
      },
    },
  ],
}
`;

exports[`mergeProps merges the props 1`] = `
Object {
  "graphql": Object {
    "query": "mutation ($personId: ID, $groupId: ID) {
        addModerator(personId: $personId, groupId: $groupId) {
          id
          moderators (first: 100) {
            items {
              id
              name
              avatarUrl
            }
          }
        }
      }",
    "variables": Object {
      "groupId": "99",
      "personId": 10,
    },
  },
  "meta": Object {
    "groupId": "99",
    "optimistic": true,
    "personId": 10,
  },
  "type": "ModeratorSettings/ADD_MODERATOR",
}
`;

exports[`mergeProps merges the props 2`] = `
Object {
  "graphql": Object {
    "query": "mutation ($personId: ID, $groupId: ID, $isRemoveFromGroup: Boolean) {
        removeModerator(personId: $personId, groupId: $groupId, isRemoveFromGroup: $isRemoveFromGroup) {
          id
          moderators (first: 100) {
            items {
              id
              name
              avatarUrl
            }
          }
        }
      }",
    "variables": Object {
      "groupId": "99",
      "isRemoveFromGroup": true,
      "personId": 10,
    },
  },
  "meta": Object {
    "groupId": "99",
    "isRemoveFromGroup": true,
    "optimistic": true,
    "personId": 10,
  },
  "type": "ModeratorSettings/REMOVE_MODERATOR",
}
`;

exports[`mergeProps merges the props 3`] = `
Object {
  "graphql": Object {
    "query": "query ($id: ID, $autocomplete: String) {
        group (id: $id) {
          id
          members (first: 10, autocomplete: $autocomplete) {
            hasMore
            items {
              id
              name
              avatarUrl
            }
          }
        }
      }",
    "variables": Object {
      "autocomplete": "autocomplete",
      "id": "99",
    },
  },
  "meta": Object {
    "extractModel": "Group",
  },
  "type": "ModeratorSettings/FETCH_MODERATOR_SUGGESTIONS",
}
`;

exports[`mergeProps merges the props 4`] = `
Object {
  "graphql": Object {
    "query": "query ($slug: String) {
        group (slug: $slug) {
          id
          name
          slug
          moderators (first: 100) {
            hasMore
            items {
              id
              name
              avatarUrl
            }
          }
        }
      }",
    "variables": Object {
      "slug": "foo",
    },
  },
  "meta": Object {
    "extractModel": "Group",
  },
  "type": "ModeratorSettings/FETCH_MODERATORS",
}
`;

exports[`mergeProps merges the props 5`] = `
Object {
  "addModerator": [Function],
  "addModeratorMaker": [Function],
  "clearModeratorSuggestions": [Function],
  "currentUser": SessionBoundModel {
    "_fields": Object {
      "id": "1",
    },
    "id": "1",
  },
  "fetchModeratorSuggestions": [Function],
  "fetchModeratorSuggestionsMaker": [Function],
  "fetchModerators": [Function],
  "fetchModeratorsMaker": [Function],
  "group": SessionBoundModel {
    "_fields": Object {
      "id": "99",
      "slug": "foo",
    },
  },
  "moderatorSuggestions": Array [],
  "moderators": Array [
    SessionBoundModel {
      "_fields": Object {
        "id": "1",
      },
    },
    SessionBoundModel {
      "_fields": Object {
        "id": "2",
      },
    },
  ],
  "removeModerator": [Function],
  "removeModeratorMaker": [Function],
  "showMember": [Function],
}
`;
