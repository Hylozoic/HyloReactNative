// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SubscribeStar matches last snapshot 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  hitSlop={
    Object {
      "bottom": 10,
      "left": 15,
      "right": 15,
      "top": 10,
    }
  }
  nativeID="animatedComponent"
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
>
  <View>
    <View />
    <Icon
      name="Star"
    />
  </View>
</View>
`;

exports[`TopicList matches last snapshot 1`] = `
<View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 15,
          "right": 15,
          "top": 10,
        }
      }
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <View />
        <Icon
          name="Star"
        />
      </View>
    </View>
    <Text>
      #
      discussion
    </Text>
    <View>
      <View>
        <Text>
          1
        </Text>
      </View>
      <Text
        allowFontScaling={false}
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            undefined,
            Object {
              "fontFamily": "Entypo",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            Object {},
          ]
        }
      >
        
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 15,
          "right": 15,
          "top": 10,
        }
      }
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <View />
        <Icon
          name="Star"
        />
      </View>
    </View>
    <Text>
      #
      tech
    </Text>
    <View>
      <View>
        <Text>
          10
        </Text>
      </View>
      <Text
        allowFontScaling={false}
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            undefined,
            Object {
              "fontFamily": "Entypo",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            Object {},
          ]
        }
      >
        
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 15,
          "right": 15,
          "top": 10,
        }
      }
      nativeID="animatedComponent"
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <View />
        <Icon
          name="Star"
        />
      </View>
    </View>
    <Text>
      #
      ecotherapy
    </Text>
    <View>
      <View>
        <Text>
          2
        </Text>
      </View>
      <Text
        allowFontScaling={false}
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            undefined,
            Object {
              "fontFamily": "Entypo",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            Object {},
          ]
        }
      >
        
      </Text>
    </View>
  </View>
</View>
`;

exports[`TopicList matches last snapshot with empty list 1`] = `
<View>
  <Text>
    No topics were found for this group
  </Text>
</View>
`;

exports[`TopicRow matches last snapshot 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  nativeID="animatedComponent"
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    hitSlop={
      Object {
        "bottom": 10,
        "left": 15,
        "right": 15,
        "top": 10,
      }
    }
    nativeID="animatedComponent"
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View>
      <View />
      <Icon
        name="Star"
      />
    </View>
  </View>
  <Text>
    #
    theTopic
  </Text>
  <View>
    <View>
      <Text>
        4
      </Text>
    </View>
    <Text
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": undefined,
            "fontSize": 12,
          },
          undefined,
          Object {
            "fontFamily": "Entypo",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      
    </Text>
  </View>
</View>
`;

exports[`Topics renders correctly a group and topics 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(242, 242, 242)",
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      pointerEvents="box-none"
    >
      <View
        accessibilityElementsHidden={false}
        importantForAccessibility="auto"
        onLayout={[Function]}
        pointerEvents="box-none"
        style={null}
      >
        <View
          pointerEvents="box-none"
        >
          <View
            collapsable={false}
            nativeID="animatedComponent"
          />
        </View>
        <View
          collapsable={false}
          nativeID="animatedComponent"
          pointerEvents="box-none"
        >
          <View
            pointerEvents="none"
            style={
              Object {
                "height": 0,
              }
            }
          />
          <View
            pointerEvents="box-none"
            style={
              Object {
                "alignItems": "stretch",
                "flex": 1,
                "flexDirection": "row",
              }
            }
          >
            <View
              pointerEvents="box-none"
            />
            <View
              pointerEvents="box-none"
            >
              <Text
                accessibilityRole="header"
                aria-level="1"
                collapsable={false}
                nativeID="animatedComponent"
                numberOfLines={1}
                onLayout={[Function]}
              >
                MockedScreen
              </Text>
            </View>
            <View
              pointerEvents="box-none"
            />
          </View>
        </View>
      </View>
    </View>
    <RNSScreenContainer
      onLayout={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RNSScreen
        activityState={2}
        forwardedRef={[Function]}
        pointerEvents="box-none"
      >
        <View
          collapsable={false}
        />
        <View
          accessibilityElementsHidden={false}
          closing={false}
          gestureVelocityImpact={0.3}
          importantForAccessibility="auto"
          onClose={[Function]}
          onGestureBegin={[Function]}
          onGestureCanceled={[Function]}
          onGestureEnd={[Function]}
          onOpen={[Function]}
          onTransition={[Function]}
          pointerEvents="box-none"
          style={
            Array [
              Object {
                "display": "flex",
                "overflow": undefined,
              },
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              },
            ]
          }
          transitionSpec={
            Object {
              "close": Object {
                "animation": "spring",
                "config": Object {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
              "open": Object {
                "animation": "spring",
                "config": Object {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
            }
          }
        >
          <View
            collapsable={false}
            nativeID="animatedComponent"
            pointerEvents="box-none"
          >
            <View
              collapsable={false}
              forwardedRef={[Function]}
              needsOffscreenAlphaCompositing={false}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
            >
              <View
                style={
                  Array [
                    Object {
                      "flex": 1,
                      "overflow": "hidden",
                    },
                    Array [
                      Object {
                        "backgroundColor": "rgb(242, 242, 242)",
                      },
                      undefined,
                    ],
                  ]
                }
              >
                <View
                  style={
                    Object {
                      "flex": 1,
                      "flexDirection": "column-reverse",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                      }
                    }
                  >
                    <View
                      onLayout={[Function]}
                    >
                      <RCTScrollView>
                        <View>
                          <View>
                            <Image
                              source={
                                Object {
                                  "uri": "group-banner.png",
                                }
                              }
                            />
                            <div
                              colors={
                                Array [
                                  "rgba(0, 0, 0, 0)",
                                  "rgba(0, 0, 0, 0.1)",
                                  "rgba(0, 0, 0, 0.3)",
                                  "rgba(0, 0, 0, 0.6)",
                                ]
                              }
                            >
                              MockLinearGradient
                            </div>
                            <View>
                              <Text>
                                Foomunity
                              </Text>
                            </View>
                          </View>
                          <View>
                            <Icon
                              name="Search"
                            />
                            <TextInput
                              autoCapitalize="none"
                              autoCorrect={false}
                              autoFocus={false}
                              editable={true}
                              placeholder="Search Topics"
                              underlineColorAndroid="transparent"
                            />
                          </View>
                          <View>
                            <Text>
                              No topics were found for this group
                            </Text>
                          </View>
                        </View>
                      </RCTScrollView>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </RNSScreen>
    </RNSScreenContainer>
  </View>
</View>
`;

exports[`Topics renders correctly with pending=true 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "backgroundColor": "rgb(242, 242, 242)",
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      pointerEvents="box-none"
    >
      <View
        accessibilityElementsHidden={false}
        importantForAccessibility="auto"
        onLayout={[Function]}
        pointerEvents="box-none"
        style={null}
      >
        <View
          pointerEvents="box-none"
        >
          <View
            collapsable={false}
            nativeID="animatedComponent"
          />
        </View>
        <View
          collapsable={false}
          nativeID="animatedComponent"
          pointerEvents="box-none"
        >
          <View
            pointerEvents="none"
            style={
              Object {
                "height": 0,
              }
            }
          />
          <View
            pointerEvents="box-none"
            style={
              Object {
                "alignItems": "stretch",
                "flex": 1,
                "flexDirection": "row",
              }
            }
          >
            <View
              pointerEvents="box-none"
            />
            <View
              pointerEvents="box-none"
            >
              <Text
                accessibilityRole="header"
                aria-level="1"
                collapsable={false}
                nativeID="animatedComponent"
                numberOfLines={1}
                onLayout={[Function]}
              >
                MockedScreen
              </Text>
            </View>
            <View
              pointerEvents="box-none"
            />
          </View>
        </View>
      </View>
    </View>
    <RNSScreenContainer
      onLayout={[Function]}
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <RNSScreen
        activityState={2}
        forwardedRef={[Function]}
        pointerEvents="box-none"
      >
        <View
          collapsable={false}
        />
        <View
          accessibilityElementsHidden={false}
          closing={false}
          gestureVelocityImpact={0.3}
          importantForAccessibility="auto"
          onClose={[Function]}
          onGestureBegin={[Function]}
          onGestureCanceled={[Function]}
          onGestureEnd={[Function]}
          onOpen={[Function]}
          onTransition={[Function]}
          pointerEvents="box-none"
          style={
            Array [
              Object {
                "display": "flex",
                "overflow": undefined,
              },
              Object {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              },
            ]
          }
          transitionSpec={
            Object {
              "close": Object {
                "animation": "spring",
                "config": Object {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
              "open": Object {
                "animation": "spring",
                "config": Object {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
            }
          }
        >
          <View
            collapsable={false}
            nativeID="animatedComponent"
            pointerEvents="box-none"
          >
            <View
              collapsable={false}
              forwardedRef={[Function]}
              needsOffscreenAlphaCompositing={false}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
            >
              <View
                style={
                  Array [
                    Object {
                      "flex": 1,
                      "overflow": "hidden",
                    },
                    Array [
                      Object {
                        "backgroundColor": "rgb(242, 242, 242)",
                      },
                      undefined,
                    ],
                  ]
                }
              >
                <View
                  style={
                    Object {
                      "flex": 1,
                      "flexDirection": "column-reverse",
                    }
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                      }
                    }
                  >
                    <View
                      onLayout={[Function]}
                    >
                      <RCTScrollView>
                        <View>
                          <View>
                            <Image
                              source={
                                Object {
                                  "uri": "group-banner.png",
                                }
                              }
                            />
                            <div
                              colors={
                                Array [
                                  "rgba(0, 0, 0, 0)",
                                  "rgba(0, 0, 0, 0.1)",
                                  "rgba(0, 0, 0, 0.3)",
                                  "rgba(0, 0, 0, 0.6)",
                                ]
                              }
                            >
                              MockLinearGradient
                            </div>
                            <View>
                              <Text>
                                Foomunity
                              </Text>
                            </View>
                          </View>
                          <View>
                            <Icon
                              name="Search"
                            />
                            <TextInput
                              autoCapitalize="none"
                              autoCorrect={false}
                              autoFocus={false}
                              editable={true}
                              placeholder="Search Topics"
                              underlineColorAndroid="transparent"
                            />
                          </View>
                          <View>
                            <ActivityIndicator
                              color="#818A88"
                              size="small"
                            />
                          </View>
                        </View>
                      </RCTScrollView>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </RNSScreen>
    </RNSScreenContainer>
  </View>
</View>
`;
