// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SubscribeStar matches last snapshot 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  hitSlop={
    Object {
      "bottom": 10,
      "left": 15,
      "right": 15,
      "top": 10,
    }
  }
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
>
  <View>
    <View />
    <Icon
      name="Star"
    />
  </View>
</View>
`;

exports[`TopicList matches last snapshot 1`] = `
<View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 15,
          "right": 15,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <View />
        <Icon
          name="Star"
        />
      </View>
    </View>
    <Text>
      #
      discussion
    </Text>
    <View>
      <View>
        <Text>
          1
        </Text>
      </View>
      <Text
        allowFontScaling={false}
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            undefined,
            Object {
              "fontFamily": "Entypo",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            Object {},
          ]
        }
      >
        
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 15,
          "right": 15,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <View />
        <Icon
          name="Star"
        />
      </View>
    </View>
    <Text>
      #
      tech
    </Text>
    <View>
      <View>
        <Text>
          10
        </Text>
      </View>
      <Text
        allowFontScaling={false}
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            undefined,
            Object {
              "fontFamily": "Entypo",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            Object {},
          ]
        }
      >
        
      </Text>
    </View>
  </View>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 15,
          "right": 15,
          "top": 10,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <View />
        <Icon
          name="Star"
        />
      </View>
    </View>
    <Text>
      #
      ecotherapy
    </Text>
    <View>
      <View>
        <Text>
          2
        </Text>
      </View>
      <Text
        allowFontScaling={false}
        style={
          Array [
            Object {
              "color": undefined,
              "fontSize": 12,
            },
            undefined,
            Object {
              "fontFamily": "Entypo",
              "fontStyle": "normal",
              "fontWeight": "normal",
            },
            Object {},
          ]
        }
      >
        
      </Text>
    </View>
  </View>
</View>
`;

exports[`TopicList matches last snapshot with empty list 1`] = `
<View>
  <Text>
    No topics were found for this group
  </Text>
</View>
`;

exports[`TopicRow matches last snapshot 1`] = `
<View
  accessible={true}
  collapsable={false}
  focusable={true}
  onClick={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
>
  <View
    accessible={true}
    collapsable={false}
    focusable={true}
    hitSlop={
      Object {
        "bottom": 10,
        "left": 15,
        "right": 15,
        "top": 10,
      }
    }
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View>
      <View />
      <Icon
        name="Star"
      />
    </View>
  </View>
  <Text>
    #
    theTopic
  </Text>
  <View>
    <View>
      <Text>
        4
      </Text>
    </View>
    <Text
      allowFontScaling={false}
      style={
        Array [
          Object {
            "color": undefined,
            "fontSize": 12,
          },
          undefined,
          Object {
            "fontFamily": "Entypo",
            "fontStyle": "normal",
            "fontWeight": "normal",
          },
          Object {},
        ]
      }
    >
      
    </Text>
  </View>
</View>
`;

exports[`Topics renders correctly a group and topics 1`] = `
<View
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <RNSScreenNavigationContainer
    style={
      Object {
        "flex": 1,
        "overflow": "hidden",
      }
    }
  >
    <RNSScreen
      activityState={2}
      collapsable={false}
      forwardedRef={[Function]}
      gestureResponseDistance={
        Object {
          "bottom": -1,
          "end": -1,
          "start": -1,
          "top": -1,
        }
      }
    >
      <View
        accessibilityElementsHidden={false}
        importantForAccessibility="auto"
        style={
          Array [
            Object {
              "backgroundColor": "rgb(242, 242, 242)",
              "flex": 1,
            },
            Array [
              Object {
                "flex": 1,
                "flexDirection": "column-reverse",
              },
              undefined,
            ],
          ]
        }
      >
        <View
          style={
            Object {
              "flex": 1,
            }
          }
        >
          <View
            onLayout={[Function]}
          >
            <RCTScrollView>
              <View>
                <View>
                  <Image
                    source={
                      Object {
                        "uri": "group-banner.png",
                      }
                    }
                  />
                  <div
                    colors={
                      Array [
                        "rgba(0, 0, 0, 0)",
                        "rgba(0, 0, 0, 0.1)",
                        "rgba(0, 0, 0, 0.3)",
                        "rgba(0, 0, 0, 0.6)",
                      ]
                    }
                  >
                    MockLinearGradient
                  </div>
                  <View>
                    <Text>
                      Foomunity
                    </Text>
                  </View>
                </View>
                <View>
                  <Icon
                    name="Search"
                  />
                  <TextInput
                    autoCapitalize="none"
                    autoCorrect={false}
                    autoFocus={false}
                    editable={true}
                    placeholder="Search Topics"
                    underlineColorAndroid="transparent"
                  />
                </View>
                <View>
                  <Text>
                    No topics were found for this group
                  </Text>
                </View>
              </View>
            </RCTScrollView>
          </View>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              collapsable={false}
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                >
                  MockedScreen
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
              />
            </View>
          </View>
        </View>
      </View>
    </RNSScreen>
  </RNSScreenNavigationContainer>
  <View
    collapsable={false}
    onLayout={[Function]}
    pointerEvents="auto"
  >
    <View
      pointerEvents="none"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
    <View
      accessibilityRole="tablist"
      style={
        Object {
          "flex": 1,
          "flexDirection": "row",
        }
      }
    >
      <View
        accessibilityLabel="MockedScreen, tab, 1 of 1"
        accessibilityRole="button"
        accessibilityState={
          Object {
            "selected": true,
          }
        }
        accessibilityStates={
          Array [
            "selected",
          ]
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
              },
              undefined,
            ]
          }
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "alignSelf": "center",
                  "height": "100%",
                  "justifyContent": "center",
                  "minWidth": 25,
                  "position": "absolute",
                  "width": "100%",
                },
                Object {
                  "opacity": 1,
                },
              ]
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  Object {
                    "color": "rgb(0, 122, 255)",
                    "fontSize": 25,
                  },
                  undefined,
                ]
              }
            >
              ⏷
            </Text>
          </View>
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "alignSelf": "center",
                  "height": "100%",
                  "justifyContent": "center",
                  "minWidth": 25,
                  "position": "absolute",
                  "width": "100%",
                },
                Object {
                  "opacity": 0,
                },
              ]
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  Object {
                    "color": "#8E8E8F",
                    "fontSize": 25,
                  },
                  undefined,
                ]
              }
            >
              ⏷
            </Text>
          </View>
        </View>
        <Text
          numberOfLines={1}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "textAlign": "center",
              },
              Object {
                "color": "rgb(0, 122, 255)",
              },
              Object {
                "fontSize": 10,
              },
              undefined,
            ]
          }
        >
          MockedScreen
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`Topics renders correctly with pending=true 1`] = `
<View
  style={
    Array [
      Object {
        "flex": 1,
      },
      undefined,
    ]
  }
>
  <RNSScreenNavigationContainer
    style={
      Object {
        "flex": 1,
        "overflow": "hidden",
      }
    }
  >
    <RNSScreen
      activityState={2}
      collapsable={false}
      forwardedRef={[Function]}
      gestureResponseDistance={
        Object {
          "bottom": -1,
          "end": -1,
          "start": -1,
          "top": -1,
        }
      }
    >
      <View
        accessibilityElementsHidden={false}
        importantForAccessibility="auto"
        style={
          Array [
            Object {
              "backgroundColor": "rgb(242, 242, 242)",
              "flex": 1,
            },
            Array [
              Object {
                "flex": 1,
                "flexDirection": "column-reverse",
              },
              undefined,
            ],
          ]
        }
      >
        <View
          style={
            Object {
              "flex": 1,
            }
          }
        >
          <View
            onLayout={[Function]}
          >
            <RCTScrollView>
              <View>
                <View>
                  <Image
                    source={
                      Object {
                        "uri": "group-banner.png",
                      }
                    }
                  />
                  <div
                    colors={
                      Array [
                        "rgba(0, 0, 0, 0)",
                        "rgba(0, 0, 0, 0.1)",
                        "rgba(0, 0, 0, 0.3)",
                        "rgba(0, 0, 0, 0.6)",
                      ]
                    }
                  >
                    MockLinearGradient
                  </div>
                  <View>
                    <Text>
                      Foomunity
                    </Text>
                  </View>
                </View>
                <View>
                  <Icon
                    name="Search"
                  />
                  <TextInput
                    autoCapitalize="none"
                    autoCorrect={false}
                    autoFocus={false}
                    editable={true}
                    placeholder="Search Topics"
                    underlineColorAndroid="transparent"
                  />
                </View>
                <View>
                  <ActivityIndicator
                    color="#818A88"
                    size="small"
                  />
                </View>
              </View>
            </RCTScrollView>
          </View>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              collapsable={false}
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
              />
              <View
                collapsable={false}
                pointerEvents="box-none"
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                >
                  MockedScreen
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
              />
            </View>
          </View>
        </View>
      </View>
    </RNSScreen>
  </RNSScreenNavigationContainer>
  <View
    collapsable={false}
    onLayout={[Function]}
    pointerEvents="auto"
  >
    <View
      pointerEvents="none"
      style={
        Object {
          "bottom": 0,
          "left": 0,
          "position": "absolute",
          "right": 0,
          "top": 0,
        }
      }
    />
    <View
      accessibilityRole="tablist"
      style={
        Object {
          "flex": 1,
          "flexDirection": "row",
        }
      }
    >
      <View
        accessibilityLabel="MockedScreen, tab, 1 of 1"
        accessibilityRole="button"
        accessibilityState={
          Object {
            "selected": true,
          }
        }
        accessibilityStates={
          Array [
            "selected",
          ]
        }
        accessible={true}
        collapsable={false}
        focusable={true}
        onBlur={[Function]}
        onClick={[Function]}
        onFocus={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
              },
              undefined,
            ]
          }
        >
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "alignSelf": "center",
                  "height": "100%",
                  "justifyContent": "center",
                  "minWidth": 25,
                  "position": "absolute",
                  "width": "100%",
                },
                Object {
                  "opacity": 1,
                },
              ]
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  Object {
                    "color": "rgb(0, 122, 255)",
                    "fontSize": 25,
                  },
                  undefined,
                ]
              }
            >
              ⏷
            </Text>
          </View>
          <View
            style={
              Array [
                Object {
                  "alignItems": "center",
                  "alignSelf": "center",
                  "height": "100%",
                  "justifyContent": "center",
                  "minWidth": 25,
                  "position": "absolute",
                  "width": "100%",
                },
                Object {
                  "opacity": 0,
                },
              ]
            }
          >
            <Text
              style={
                Array [
                  Object {
                    "backgroundColor": "transparent",
                  },
                  Object {
                    "color": "#8E8E8F",
                    "fontSize": 25,
                  },
                  undefined,
                ]
              }
            >
              ⏷
            </Text>
          </View>
        </View>
        <Text
          numberOfLines={1}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "textAlign": "center",
              },
              Object {
                "color": "rgb(0, 122, 255)",
              },
              Object {
                "fontSize": 10,
              },
              undefined,
            ]
          }
        >
          MockedScreen
        </Text>
      </View>
    </View>
  </View>
</View>
`;
