// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`NotificationsList matches the last snapshot 1`] = `
<View>
  <RCTScrollView
    data={
      [
        {
          "activityId": "1",
          "actor": {
            "avatarUrl": "https://wombat.com",
            "name": "Wombat McAardvark",
          },
          "avatarSeparator": false,
          "createdAt": "2 min ago",
          "id": "1",
          "onPress": [MockFunction],
          "unread": false,
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
      >
        <View>
          <View
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": undefined,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          >
            <View>
              <View>
                <View>
                  <View
                    style={
                      [
                        {
                          "overflow": "hidden",
                        },
                        undefined,
                      ]
                    }
                  >
                    <FastImageView
                      defaultSource={null}
                      resizeMode="cover"
                      source={
                        {
                          "uri": "https://wombat.com",
                        }
                      }
                      style={
                        {
                          "bottom": 0,
                          "left": 0,
                          "position": "absolute",
                          "right": 0,
                          "top": 0,
                        }
                      }
                    />
                  </View>
                </View>
              </View>
              <View>
                <Text
                  numberOfLines={2}
                >
                  <Text />
                </Text>
                <Text>
                  <Text>
                    Wombat 
                  </Text>
                </Text>
                <Text>
                  2 min ago
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`NotificationsList matches the last snapshot for NotificationRow 1`] = `
<View>
  <TouchableOpacity
    onPress={[Function]}
  >
    <NotificationCard
      notification={
        {
          "activityId": "1",
          "actor": {
            "avatarUrl": "https://wombat.com",
            "name": "Wombat McAardvark",
          },
          "avatarSeparator": false,
          "createdAt": "2 min ago",
          "id": "1",
          "onPress": [MockFunction],
          "unread": false,
        }
      }
    />
  </TouchableOpacity>
</View>
`;

exports[`NotificationsList matches the renders CreateGroupNotice if user does not have memberships 1`] = `
<View>
  <Text>
    No notifications here, try creating your own Group!
  </Text>
  <Image
    source={
      {
        "process": [Function],
      }
    }
  />
  <View>
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <View>
          <Text>
            Start a Group
          </Text>
        </View>
      </View>
    </View>
  </View>
</View>
`;
