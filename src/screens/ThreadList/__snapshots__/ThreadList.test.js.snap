// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageRow calls showThread 1`] = `
<View>
  <View
    accessibilityState={
      {
        "busy": undefined,
        "checked": undefined,
        "disabled": undefined,
        "expanded": undefined,
        "selected": undefined,
      }
    }
    accessibilityValue={
      {
        "max": undefined,
        "min": undefined,
        "now": undefined,
        "text": undefined,
      }
    }
    accessible={true}
    collapsable={false}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View>
      <View>
        <View>
          <View
            style={
              [
                {
                  "overflow": "hidden",
                },
                undefined,
              ]
            }
          >
            <FastImageView
              defaultSource={null}
              resizeMode="cover"
              source={
                {
                  "uri": "blah",
                }
              }
              style={
                {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                }
              }
            />
          </View>
        </View>
      </View>
      <View>
        <Text>
          Test User
        </Text>
        <Text
          numberOfLines={2}
        >
          This is a message.
        </Text>
        <Text />
      </View>
    </View>
  </View>
</View>
`;

exports[`MessageRow renders correctly 1`] = `
<View>
  <TouchableOpacity
    onPress={[Function]}
  >
    <ThreadCard
      message={
        [
          {
            "creator": {
              "id": 1,
            },
            "id": 1,
          },
        ]
      }
      participants={
        [
          {
            "id": 2,
          },
        ]
      }
    />
  </TouchableOpacity>
</View>
`;

exports[`ThreadList fetches threads initially when empty 1`] = `
<View>
  <Text>
    No active conversations
  </Text>
  <RCTScrollView
    data={[]}
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={0.0001}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`ThreadList handles pending correctly with threads 1`] = `
<View>
  <View>
    <ActivityIndicator
      accessibilityHint="loading"
      color="#818A88"
      size="small"
    />
  </View>
  <RCTScrollView
    data={
      [
        {
          "id": 1,
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={0.0001}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
      >
        <View>
          <View
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": undefined,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          />
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`ThreadList handles pending correctly without threads 1`] = `
<View>
  <Loading />
  <FlatList
    data={[]}
    keyExtractor={[Function]}
    renderItem={[Function]}
  />
</View>
`;

exports[`ThreadList handles when there are no threads correctly 1`] = `
<View>
  <Text>
    No active conversations
  </Text>
  <RCTScrollView
    data={[]}
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={0.0001}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`ThreadList renders correctly 1`] = `
<View>
  <RCTScrollView
    data={
      [
        {
          "id": 1,
          "lastMessage": {
            "id": 1,
          },
          "participants": [
            {
              "avatarUrl": "blah",
              "id": 1,
            },
          ],
        },
      ]
    }
    getItem={[Function]}
    getItemCount={[Function]}
    keyExtractor={[Function]}
    onContentSizeChange={[Function]}
    onLayout={[Function]}
    onMomentumScrollBegin={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={0.0001}
    stickyHeaderIndices={[]}
    viewabilityConfigCallbackPairs={[]}
  >
    <View>
      <View
        onFocusCapture={[Function]}
        onLayout={[Function]}
      >
        <View>
          <View
            accessibilityState={
              {
                "busy": undefined,
                "checked": undefined,
                "disabled": undefined,
                "expanded": undefined,
                "selected": undefined,
              }
            }
            accessibilityValue={
              {
                "max": undefined,
                "min": undefined,
                "now": undefined,
                "text": undefined,
              }
            }
            accessible={true}
            collapsable={false}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          />
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
