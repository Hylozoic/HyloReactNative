// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`mapDispatchToProps creates actions 1`] = `
{
  "createMessage": [Function],
  "fetchMessages": [Function],
  "reconnectFetchMessages": [Function],
  "sendIsTyping": [Function],
  "showMember": [Function],
  "showTopic": [Function],
  "updateThreadReadTime": [Function],
}
`;

exports[`mapDispatchToProps creates actions 2`] = `
[
  [
    {
      "graphql": {
        "query": "mutation ($messageThreadId: String, $text: String) {
        createMessage(data: {messageThreadId: $messageThreadId, text: $text}) {
          id
          text
          createdAt
          creator {
            id
          }
          messageThread {
            id
          }
        }
      }",
        "variables": {
          "messageThreadId": 77,
          "optimistic": true,
          "text": "some text",
        },
      },
      "meta": {
        "messageThreadId": 77,
        "optimistic": true,
        "tempId": "messageThread77_1",
        "text": "some text",
      },
      "type": "Thread/CREATE_MESSAGE",
    },
  ],
  [
    {
      "graphql": {
        "query": "
        query ($id: ID, $cursor: ID, $messagePageSize: Int) {
          messageThread (id: $id) {
            id
            messages(first: $messagePageSize, cursor: $cursor, order: "desc") {
              items {
                id
                createdAt
                text
                creator {
                  id
                }
              }
              total
              hasMore
            }
            participants {
              id
              name
              avatarUrl
            }
          }
        }
      ",
        "variables": {
          "cursor": 3,
          "id": 77,
          "messagePageSize": 20,
        },
      },
      "meta": {
        "afterInteractions": true,
        "extractModel": "MessageThread",
        "extractQueryResults": {
          "getItems": [Function],
        },
        "id": 77,
        "reset": undefined,
      },
      "type": "Thread/FETCH_MESSAGES",
    },
  ],
  [
    {
      "graphql": {
        "query": "
        query ($id: ID, $cursor: ID, $messagePageSize: Int) {
          messageThread (id: $id) {
            id
            messages(first: $messagePageSize, cursor: $cursor, order: "desc") {
              items {
                id
                createdAt
                text
                creator {
                  id
                }
              }
              total
              hasMore
            }
            participants {
              id
              name
              avatarUrl
            }
          }
        }
      ",
        "variables": {
          "id": 77,
          "messagePageSize": 20,
        },
      },
      "meta": {
        "afterInteractions": true,
        "extractModel": "MessageThread",
        "extractQueryResults": {
          "getItems": [Function],
        },
        "id": 77,
        "reset": true,
      },
      "type": "Thread/FETCH_MESSAGES",
    },
  ],
  [
    {
      "meta": {
        "id": 77,
      },
      "payload": {
        "api": {
          "method": "POST",
          "path": "/noo/post/77/update-last-read",
        },
      },
      "type": "Thread/UPDATE_THREAD_READ_TIME",
    },
  ],
]
`;

exports[`mapDispatchToProps creates actions 3`] = `[]`;

exports[`mapStateToProps returns the right keys 1`] = `
Object {
  "currentUserId": undefined,
  "groupId": "public",
  "hasMore": undefined,
  "id": undefined,
  "isConnected": undefined,
  "messages": undefined,
  "participants": undefined,
  "pending": undefined,
  "title": undefined,
}
`;
