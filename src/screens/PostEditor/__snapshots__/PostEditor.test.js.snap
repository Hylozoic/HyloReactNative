// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PostEditor renders a new editor correctly 1`] = `
<KeyboardFriendlyView>
  <ScrollView
    keyboardDismissMode="on-drag"
    keyboardShouldPersistTaps="handled"
    onContentSizeChange={[Function]}
  >
    <View>
      <View>
        <TypeSelector
          disabled={false}
          onValueChange={[Function]}
          value="discussion"
        />
      </View>
      <Text>
        Title
      </Text>
      <View>
        <TextInput
          editable={true}
          maxLength={100}
          onChangeText={[Function]}
          placeholder="What do you want to discuss?"
          placeholderTextColor="#c0c6cd"
          underlineColorAndroid="transparent"
          value=""
        />
      </View>
      <Text>
        Details
      </Text>
      <ForwardRef(HyloEditorWebView)
        onAddTopic={[Function]}
        onChange={[Function]}
        placeholder="What else should we know?"
        readOnly={false}
      />
      <TouchableOpacity
        onPress={[Function]}
      >
        <View>
          <Text>
            Topics
          </Text>
          <View>
            <Icon
              name="Plus"
            />
          </View>
        </View>
        <Topics
          onPress={[Function]}
          topics={Array []}
        />
        <Text>
          Add topics.
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        onPress={[Function]}
      >
        <View>
          <Text>
            Location
          </Text>
          <View>
            <Icon
              name="Plus"
            />
          </View>
        </View>
        <Text>
          Select a Location
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        onPress={[Function]}
      >
        <View>
          <Text>
            Post In
          </Text>
          <View>
            <Icon
              name="Plus"
            />
          </View>
        </View>
        <GroupsList
          RightIcon={[Function]}
          columns={1}
          groups={Array []}
          onPress={[Function]}
        />
        <Text>
          Select which groups to post in.
        </Text>
      </TouchableOpacity>
    </View>
  </ScrollView>
  <Toolbar
    addImage={[Function]}
    announcementEnabled={false}
    showAlert={[Function]}
    toggleAnnoucement={[Function]}
  />
</KeyboardFriendlyView>
`;

exports[`PostEditor renders correctly while saving 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "backgroundColor": "rgb(242, 242, 242)",
            "flex": 1,
          },
          undefined,
        ]
      }
    >
      <RNSScreenContainer
        onLayout={[Function]}
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <RNSScreen
          activityState={1}
          collapsable={false}
          forwardedRef={[Function]}
          pointerEvents="box-none"
        >
          <View
            collapsable={false}
          />
          <View
            accessibilityElementsHidden={true}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="no-hide-descendants"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": "hidden",
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
              >
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        onLayout={[Function]}
                      >
                        <RCTScrollView
                          keyboardDismissMode="on-drag"
                          keyboardShouldPersistTaps="handled"
                          onContentSizeChange={[Function]}
                        >
                          <View>
                            <View>
                              <View>
                                <View>
                                  <View
                                    accessible={true}
                                    collapsable={false}
                                    focusable={true}
                                    onClick={[Function]}
                                    onResponderGrant={[Function]}
                                    onResponderMove={[Function]}
                                    onResponderRelease={[Function]}
                                    onResponderTerminate={[Function]}
                                    onResponderTerminationRequest={[Function]}
                                    onStartShouldSetResponder={[Function]}
                                    testID="ios_touchable_wrapper"
                                  >
                                    <View
                                      pointerEvents="box-only"
                                    >
                                      <TextInput
                                        editable={false}
                                        testID="text_input"
                                        value="DISCUSSION"
                                      />
                                      <View
                                        testID="icon_container"
                                      >
                                        <Icon
                                          name="ArrowDown"
                                        />
                                      </View>
                                    </View>
                                  </View>
                                  <Modal
                                    hardwareAccelerated={false}
                                    onOrientationChange={[Function]}
                                    supportedOrientations={
                                      Array [
                                        "portrait",
                                        "landscape",
                                      ]
                                    }
                                    testID="ios_modal"
                                    transparent={true}
                                    visible={false}
                                  />
                                </View>
                              </View>
                              <Text>
                                Title
                              </Text>
                              <View>
                                <TextInput
                                  editable={false}
                                  maxLength={100}
                                  onChangeText={[Function]}
                                  placeholder="What do you want to discuss?"
                                  placeholderTextColor="#c0c6cd"
                                  underlineColorAndroid="transparent"
                                  value="title of this post"
                                />
                              </View>
                              <Text>
                                Details
                              </Text>
                              <View>
                                <ActivityIndicator
                                  color="#818A88"
                                  size="small"
                                />
                              </View>
                              <View
                                accessible={true}
                                collapsable={false}
                                focusable={true}
                                onClick={[Function]}
                                onResponderGrant={[Function]}
                                onResponderMove={[Function]}
                                onResponderRelease={[Function]}
                                onResponderTerminate={[Function]}
                                onResponderTerminationRequest={[Function]}
                                onStartShouldSetResponder={[Function]}
                              >
                                <View>
                                  <Text>
                                    Topics
                                  </Text>
                                  <View>
                                    <Icon
                                      name="Plus"
                                    />
                                  </View>
                                </View>
                                <Text>
                                  Add topics.
                                </Text>
                              </View>
                              <View
                                accessible={true}
                                collapsable={false}
                                focusable={true}
                                onClick={[Function]}
                                onResponderGrant={[Function]}
                                onResponderMove={[Function]}
                                onResponderRelease={[Function]}
                                onResponderTerminate={[Function]}
                                onResponderTerminationRequest={[Function]}
                                onStartShouldSetResponder={[Function]}
                              >
                                <View>
                                  <Text>
                                    Location
                                  </Text>
                                  <View>
                                    <Icon
                                      name="Plus"
                                    />
                                  </View>
                                </View>
                                <Text>
                                  Select a Location
                                </Text>
                              </View>
                              <View
                                accessible={true}
                                collapsable={false}
                                focusable={true}
                                onClick={[Function]}
                                onResponderGrant={[Function]}
                                onResponderMove={[Function]}
                                onResponderRelease={[Function]}
                                onResponderTerminate={[Function]}
                                onResponderTerminationRequest={[Function]}
                                onStartShouldSetResponder={[Function]}
                              >
                                <View>
                                  <Text>
                                    Post In
                                  </Text>
                                  <View>
                                    <Icon
                                      name="Plus"
                                    />
                                  </View>
                                </View>
                                <View>
                                  <View
                                    accessible={true}
                                    collapsable={false}
                                    focusable={true}
                                    onClick={[Function]}
                                    onResponderGrant={[Function]}
                                    onResponderMove={[Function]}
                                    onResponderRelease={[Function]}
                                    onResponderTerminate={[Function]}
                                    onResponderTerminationRequest={[Function]}
                                    onStartShouldSetResponder={[Function]}
                                  >
                                    <Image
                                      source={
                                        Object {
                                          "uri": "https://d3ngex8q79bk55.cloudfront.net/misc/default_community_avatar.png",
                                        }
                                      }
                                    />
                                    <Text
                                      numberOfLines={1}
                                    >
                                      Group 1
                                    </Text>
                                    <Icon
                                      name="Ex"
                                    />
                                  </View>
                                </View>
                              </View>
                            </View>
                          </View>
                        </RCTScrollView>
                        <View>
                          <View>
                            <View
                              accessible={true}
                              collapsable={false}
                              focusable={false}
                              onClick={[Function]}
                              onResponderGrant={[Function]}
                              onResponderMove={[Function]}
                              onResponderRelease={[Function]}
                              onResponderTerminate={[Function]}
                              onResponderTerminationRequest={[Function]}
                              onStartShouldSetResponder={[Function]}
                            >
                              <Icon
                                name="Paperclip"
                              />
                            </View>
                            <View
                              accessible={true}
                              collapsable={false}
                              focusable={true}
                              hitSlop={
                                Object {
                                  "bottom": 5,
                                  "left": 5,
                                  "right": 5,
                                  "top": 5,
                                }
                              }
                              onClick={[Function]}
                              onResponderGrant={[Function]}
                              onResponderMove={[Function]}
                              onResponderRelease={[Function]}
                              onResponderTerminate={[Function]}
                              onResponderTerminationRequest={[Function]}
                              onStartShouldSetResponder={[Function]}
                            >
                              <Icon
                                name="AddImage"
                              />
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                    <View
                      collapsable={false}
                      pointerEvents="box-none"
                    >
                      <View
                        accessibilityElementsHidden={true}
                        importantForAccessibility="no-hide-descendants"
                        onLayout={[Function]}
                        pointerEvents="none"
                        style={null}
                      >
                        <View
                          collapsable={false}
                          pointerEvents="box-none"
                        >
                          <View
                            collapsable={false}
                          />
                        </View>
                        <View
                          collapsable={false}
                          pointerEvents="box-none"
                        >
                          <View
                            pointerEvents="none"
                            style={
                              Object {
                                "height": 0,
                              }
                            }
                          />
                          <View
                            pointerEvents="box-none"
                            style={
                              Object {
                                "alignItems": "stretch",
                                "flex": 1,
                                "flexDirection": "row",
                              }
                            }
                          >
                            <View
                              collapsable={false}
                              pointerEvents="box-none"
                            >
                              <View
                                accessible={true}
                                collapsable={false}
                                focusable={true}
                                hitSlop={
                                  Object {
                                    "bottom": 7,
                                    "left": 7,
                                    "right": 7,
                                    "top": 7,
                                  }
                                }
                                onClick={[Function]}
                                onResponderGrant={[Function]}
                                onResponderMove={[Function]}
                                onResponderRelease={[Function]}
                                onResponderTerminate={[Function]}
                                onResponderTerminationRequest={[Function]}
                                onStartShouldSetResponder={[Function]}
                              >
                                <Icon
                                  color="#283a50"
                                  name="Ex"
                                />
                              </View>
                            </View>
                            <View
                              collapsable={false}
                              pointerEvents="box-none"
                            >
                              <Text
                                accessibilityRole="header"
                                aria-level="1"
                                collapsable={false}
                                numberOfLines={1}
                              >
                                Edit Discussion
                              </Text>
                            </View>
                            <View
                              collapsable={false}
                              pointerEvents="box-none"
                            >
                              <View
                                accessibilityState={
                                  Object {
                                    "disabled": true,
                                  }
                                }
                                accessible={true}
                                collapsable={false}
                                focusable={true}
                                hitSlop={
                                  Object {
                                    "bottom": 7,
                                    "left": 7,
                                    "right": 7,
                                    "top": 7,
                                  }
                                }
                                onClick={[Function]}
                                onResponderGrant={[Function]}
                                onResponderMove={[Function]}
                                onResponderRelease={[Function]}
                                onResponderTerminate={[Function]}
                                onResponderTerminationRequest={[Function]}
                                onStartShouldSetResponder={[Function]}
                              >
                                <Text>
                                  Saving...
                                </Text>
                              </View>
                            </View>
                          </View>
                        </View>
                      </View>
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
        <RNSScreen
          activityState={1}
          collapsable={false}
          forwardedRef={[Function]}
          pointerEvents="box-none"
        >
          <View
            collapsable={false}
          />
          <View
            accessibilityElementsHidden={false}
            closing={false}
            gestureVelocityImpact={0.3}
            importantForAccessibility="auto"
            onClose={[Function]}
            onGestureBegin={[Function]}
            onGestureCanceled={[Function]}
            onGestureEnd={[Function]}
            onOpen={[Function]}
            onTransition={[Function]}
            pointerEvents="box-none"
            style={
              Array [
                Object {
                  "display": "flex",
                  "overflow": undefined,
                },
                Object {
                  "bottom": 0,
                  "left": 0,
                  "position": "absolute",
                  "right": 0,
                  "top": 0,
                },
              ]
            }
            transitionSpec={
              Object {
                "close": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
                "open": Object {
                  "animation": "spring",
                  "config": Object {
                    "damping": 500,
                    "mass": 3,
                    "overshootClamping": true,
                    "restDisplacementThreshold": 10,
                    "restSpeedThreshold": 10,
                    "stiffness": 1000,
                  },
                },
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
            >
              <View
                collapsable={false}
                forwardedRef={[Function]}
                needsOffscreenAlphaCompositing={false}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
              >
                <View
                  style={
                    Array [
                      Object {
                        "flex": 1,
                        "overflow": "hidden",
                      },
                      Array [
                        Object {
                          "backgroundColor": "rgb(242, 242, 242)",
                        },
                        undefined,
                      ],
                    ]
                  }
                >
                  <View
                    style={
                      Object {
                        "flex": 1,
                        "flexDirection": "column-reverse",
                      }
                    }
                  >
                    <View
                      style={
                        Object {
                          "flex": 1,
                        }
                      }
                    />
                  </View>
                </View>
              </View>
            </View>
          </View>
        </RNSScreen>
      </RNSScreenContainer>
      <View
        collapsable={false}
        pointerEvents="box-none"
      >
        <View
          accessibilityElementsHidden={false}
          importantForAccessibility="auto"
          onLayout={[Function]}
          pointerEvents="box-none"
          style={null}
        >
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              collapsable={false}
            />
          </View>
          <View
            collapsable={false}
            pointerEvents="box-none"
          >
            <View
              pointerEvents="none"
              style={
                Object {
                  "height": 0,
                }
              }
            />
            <View
              pointerEvents="box-none"
              style={
                Object {
                  "alignItems": "stretch",
                  "flex": 1,
                  "flexDirection": "row",
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="box-none"
              >
                <View
                  accessibilityLabel="MockedScreen, back"
                  accessibilityRole="button"
                  accessible={true}
                  collapsable={false}
                  focusable={true}
                  onBlur={[Function]}
                  onClick={[Function]}
                  onFocus={[Function]}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                >
                  <Image
                    fadeDuration={0}
                    source={
                      Object {
                        "testUri": "../../@react-navigation/elements/lib/commonjs/assets/back-icon.png",
                      }
                    }
                    style={
                      Array [
                        Object {
                          "height": 21,
                          "marginLeft": 8,
                          "marginRight": 22,
                          "marginVertical": 12,
                          "resizeMode": "contain",
                          "transform": Array [
                            Object {
                              "scaleX": 1,
                            },
                          ],
                          "width": 13,
                        },
                        Object {
                          "marginRight": 6,
                        },
                        Object {
                          "tintColor": "rgb(0, 122, 255)",
                        },
                      ]
                    }
                  />
                  <View
                    style={
                      Array [
                        Object {
                          "alignItems": "flex-start",
                          "flexDirection": "row",
                        },
                        Object {
                          "minWidth": 133,
                        },
                      ]
                    }
                  >
                    <Text
                      accessible={false}
                      allowFontScaling={false}
                      collapsable={false}
                      numberOfLines={1}
                      onLayout={[Function]}
                    >
                      MockedScreen
                    </Text>
                  </View>
                </View>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
              >
                <Text
                  accessibilityRole="header"
                  aria-level="1"
                  collapsable={false}
                  numberOfLines={1}
                  onLayout={[Function]}
                >
                  Post Details
                </Text>
              </View>
              <View
                collapsable={false}
                pointerEvents="box-none"
              />
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`PostEditor renders with a post 1`] = `
<KeyboardFriendlyView>
  <ScrollView
    keyboardDismissMode="on-drag"
    keyboardShouldPersistTaps="handled"
    onContentSizeChange={[Function]}
  >
    <View>
      <View>
        <TypeSelector
          disabled={false}
          onValueChange={[Function]}
          value="discussion"
        />
      </View>
      <Text>
        Title
      </Text>
      <View>
        <TextInput
          editable={true}
          maxLength={100}
          onChangeText={[Function]}
          placeholder="What do you want to discuss?"
          placeholderTextColor="#c0c6cd"
          underlineColorAndroid="transparent"
          value=""
        />
      </View>
      <Text>
        Details
      </Text>
      <ForwardRef(HyloEditorWebView)
        contentHTML="myDetails"
        onAddTopic={[Function]}
        onChange={[Function]}
        placeholder="What else should we know?"
        readOnly={false}
      />
      <TouchableOpacity
        onPress={[Function]}
      >
        <View>
          <Text>
            Topics
          </Text>
          <View>
            <Icon
              name="Plus"
            />
          </View>
        </View>
        <Topics
          onPress={[Function]}
          topics={Array []}
        />
        <Text>
          Add topics.
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        onPress={[Function]}
      >
        <View>
          <Text>
            Location
          </Text>
          <View>
            <Icon
              name="Plus"
            />
          </View>
        </View>
        <Text>
          Select a Location
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        onPress={[Function]}
      >
        <View>
          <Text>
            Post In
          </Text>
          <View>
            <Icon
              name="Plus"
            />
          </View>
        </View>
        <GroupsList
          RightIcon={[Function]}
          columns={1}
          groups={
            Array [
              Object {
                "id": 1,
                "name": "Group 1",
              },
            ]
          }
          onPress={[Function]}
        />
      </TouchableOpacity>
      <View>
        <Text>
          Images
        </Text>
        <ImageSelector
          imageUrls={
            Array [
              "http://foo.com/foo.png",
              "http://baz.com/baz.png",
            ]
          }
          onAdd={[Function]}
          onRemove={[Function]}
          type="post"
        />
      </View>
    </View>
  </ScrollView>
  <Toolbar
    addImage={[Function]}
    announcementEnabled={false}
    post={
      Object {
        "details": "myDetails",
        "groups": Array [
          Object {
            "id": 1,
            "name": "Group 1",
          },
        ],
        "imageUrls": Array [
          "http://foo.com/foo.png",
          "http://baz.com/baz.png",
        ],
      }
    }
    showAlert={[Function]}
    toggleAnnoucement={[Function]}
  />
</KeyboardFriendlyView>
`;

exports[`TypeButton renders correctly 1`] = `
<RNPickerSelect
  Icon={[Function]}
  InputAccessoryView={null}
  disabled={false}
  doneText="Done"
  fixAndroidTouchableBug={false}
  itemKey={null}
  items={
    Array [
      Object {
        "color": "#40A1DD",
        "label": "DISCUSSION",
        "value": "discussion",
      },
      Object {
        "color": "#FE4850",
        "label": "EVENT",
        "value": "event",
      },
      Object {
        "color": "#0DC39F",
        "label": "OFFER",
        "value": "offer",
      },
      Object {
        "color": "#FFD403",
        "label": "RESOURCE",
        "value": "resource",
      },
      Object {
        "color": "#FC8000",
        "label": "PROJECT",
        "value": "project",
      },
      Object {
        "color": "#664BA5",
        "label": "REQUEST",
        "value": "request",
      },
    ]
  }
  modalProps={Object {}}
  onClose={null}
  onDonePress={null}
  onDownArrow={null}
  onOpen={null}
  onUpArrow={null}
  onValueChange={[MockFunction]}
  pickerProps={Object {}}
  placeholder={
    Object {
      "color": "#9EA0A4",
      "label": "Select an item...",
      "value": null,
    }
  }
  style={Object {}}
  textInputProps={Object {}}
  touchableDoneProps={Object {}}
  touchableWrapperProps={Object {}}
  useNativeAndroidPickerStyle={false}
  value="discussion"
/>
`;
