// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SocialAccounts matches the last snapshot 1`] = `
<View>
  <Text>
    SOCIAL ACCOUNTS
  </Text>
  <SocialControl
    label="Facebook"
    onChange={[Function]}
    onLink={[Function]}
    provider="facebook"
    unlinkAccount={[Function]}
    value="foo.com"
  />
  <SocialControl
    label="Twitter"
    onChange={[Function]}
    onLink={[Function]}
    provider="twitter"
    unlinkAccount={[Function]}
    updateUserSettings={[Function]}
    value="rara"
  />
</View>
`;

exports[`SocialControl matches the last snapshot linked 1`] = `
<View>
  <Text />
  <TouchableOpacity
    onPress={[Function]}
  >
    <Text>
      Unlink
    </Text>
  </TouchableOpacity>
</View>
`;

exports[`SocialControl matches the last snapshot loading 1`] = `
<View>
  <Text />
  <Text>
    Loading
  </Text>
</View>
`;

exports[`SocialControl matches the last snapshot unlinked 1`] = `
<View>
  <Text />
  <TouchableOpacity
    onPress={[Function]}
  >
    <Text>
      Link
    </Text>
  </TouchableOpacity>
</View>
`;

exports[`UserSettings confirmLeave calls Alert.alert when changed is true 1`] = `
Array [
  Array [
    "You have unsaved changes",
    "Are you sure you want to discard your changes?",
    Array [
      Object {
        "onPress": [MockFunction],
        "text": "Discard",
      },
      Object {
        "style": "cancel",
        "text": "Continue Editing",
      },
    ],
  ],
]
`;

exports[`UserSettings handleCancelPassword sets the state, setting changed to false when email has not changed 1`] = `
Object {
  "changed": false,
  "editingPassword": false,
  "edits": Object {
    "confirmPassword": null,
    "email": "moo@moo.com",
    "password": null,
  },
  "errors": Object {
    "confirmPassword": null,
    "email": "bad email",
    "password": null,
  },
}
`;

exports[`UserSettings handleCancelPassword sets the state, setting changed to true when email has changed 1`] = `
Object {
  "changed": true,
  "editingPassword": false,
  "edits": Object {
    "confirmPassword": null,
    "email": "different@email.com",
    "password": null,
  },
  "errors": Object {
    "confirmPassword": null,
    "email": "bad email",
    "password": null,
  },
}
`;

exports[`UserSettings matches snapshot with state set 1`] = `
<View>
  <View
    onLayout={[Function]}
  >
    <RCTScrollView
      contentContainerStyle={
        Object {
          "flexGrow": 1,
        }
      }
    >
      <View>
        <SettingControl
          autoCapitalize="none"
          autoCorrect={false}
          error="bad email"
          keyboardType="email-address"
          label="EMAIL"
          onChange={[Function]}
          theme={
            Object {
              "control": Object {
                "marginBottom": 3,
              },
              "error": Object {
                "paddingBottom": 10,
                "paddingVertical": 0,
              },
              "eyeIcon": Object {
                "color": "#c0c6cd",
              },
              "hideErrorTriangle": true,
              "label": Object {
                "color": "#c0c6cd",
                "fontFamily": "Circular-Bold",
                "fontSize": 10,
                "marginBottom": 10,
              },
              "textInput": Object {
                "borderBottomColor": "#c0c6cd",
                "borderBottomWidth": 0.5,
                "color": "#56667a",
                "fontFamily": "Circular-Book",
                "fontSize": 16,
              },
            }
          }
          value="aa@bbb.com"
        />
        <SettingControl
          autoCapitalize="none"
          autoCorrect={false}
          error="needs to be longer"
          label="PASSWORD"
          onChange={[Function]}
          theme={
            Object {
              "control": Object {
                "marginBottom": 3,
              },
              "error": Object {
                "paddingBottom": 10,
                "paddingVertical": 0,
              },
              "eyeIcon": Object {
                "color": "#c0c6cd",
              },
              "hideErrorTriangle": true,
              "label": Object {
                "color": "#c0c6cd",
                "fontFamily": "Circular-Bold",
                "fontSize": 10,
                "marginBottom": 10,
              },
              "textInput": Object {
                "borderBottomColor": "#c0c6cd",
                "borderBottomWidth": 0.5,
                "color": "#56667a",
                "fontFamily": "Circular-Book",
                "fontSize": 16,
              },
            }
          }
          toggleSecureTextEntry={true}
          value="hunkjnkjn"
        />
        <SettingControl
          autoCapitalize="none"
          autoCorrect={false}
          error="needs to match"
          label="CONFIRM PASSWORD"
          onChange={[Function]}
          theme={
            Object {
              "control": Object {
                "marginBottom": 3,
              },
              "error": Object {
                "paddingBottom": 10,
                "paddingVertical": 0,
              },
              "eyeIcon": Object {
                "color": "#c0c6cd",
              },
              "hideErrorTriangle": true,
              "label": Object {
                "color": "#c0c6cd",
                "fontFamily": "Circular-Bold",
                "fontSize": 10,
                "marginBottom": 10,
              },
              "textInput": Object {
                "borderBottomColor": "#c0c6cd",
                "borderBottomWidth": 0.5,
                "color": "#56667a",
                "fontFamily": "Circular-Book",
                "fontSize": 16,
              },
            }
          }
          toggleSecureTextEntry={true}
          value="fkldsflkjdf"
        />
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onClick={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
        >
          <Text>
            Cancel Password Change
          </Text>
        </View>
        <View>
          <Text>
            SOCIAL ACCOUNTS
          </Text>
          <View>
            <Text>
              Facebook
            </Text>
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <Text>
                Unlink
              </Text>
            </View>
          </View>
          <View>
            <Text>
              Twitter
            </Text>
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <Text>
                Unlink
              </Text>
            </View>
          </View>
        </View>
        <View>
          <View>
            <View
              accessible={true}
              collapsable={false}
              focusable={false}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <View>
                <View>
                  <Text>
                    Blocked Users
                  </Text>
                </View>
              </View>
            </View>
          </View>
        </View>
        <View>
          <View>
            <View
              accessible={true}
              collapsable={false}
              focusable={false}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <View>
                <View>
                  <Text>
                    Notification Settings
                  </Text>
                </View>
              </View>
            </View>
          </View>
        </View>
        <View>
          <View>
            <View
              accessibilityState={
                Object {
                  "disabled": true,
                }
              }
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <View>
                <View>
                  <Text>
                    Save Changes
                  </Text>
                </View>
              </View>
            </View>
          </View>
        </View>
      </View>
    </RCTScrollView>
  </View>
</View>
`;

exports[`UserSettings matches the last snapshot 1`] = `
<View>
  <KeyboardFriendlyView>
    <ScrollView
      contentContainerStyle={
        Object {
          "flexGrow": 1,
        }
      }
    >
      <SettingControl
        autoCapitalize="none"
        autoCorrect={false}
        keyboardType="email-address"
        label="EMAIL"
        onChange={[Function]}
        theme={
          Object {
            "control": Object {
              "marginBottom": 3,
            },
            "error": Object {
              "paddingBottom": 10,
              "paddingVertical": 0,
            },
            "eyeIcon": Object {
              "color": "#c0c6cd",
            },
            "hideErrorTriangle": true,
            "label": Object {
              "color": "#c0c6cd",
              "fontFamily": "Circular-Bold",
              "fontSize": 10,
              "marginBottom": 10,
            },
            "textInput": Object {
              "borderBottomColor": "#c0c6cd",
              "borderBottomWidth": 0.5,
              "color": "#56667a",
              "fontFamily": "Circular-Book",
              "fontSize": 16,
            },
          }
        }
        value=""
      />
      <View>
        <Text>
          PASSWORD
        </Text>
        <TouchableOpacity
          onPress={[Function]}
        >
          <Text>
            Change Password
          </Text>
        </TouchableOpacity>
      </View>
      <SocialAccounts
        loginWithFacebook={[Function]}
        twitterPrompt={[Function]}
        unlinkAccount={[Function]}
        updateField={[Function]}
        updateUserSettings={[Function]}
      />
      <View>
        <Button
          text="Blocked Users"
        />
      </View>
      <View>
        <Button
          text="Notification Settings"
        />
      </View>
      <View>
        <Button
          disabled={true}
          onPress={false}
          text="Save Changes"
        />
      </View>
    </ScrollView>
  </KeyboardFriendlyView>
</View>
`;

exports[`UserSettings updateField sets the state 1`] = `
Object {
  "changed": true,
  "editingPassword": false,
  "edits": Object {
    "email": "newemail",
    "password": "ldlkd",
  },
  "errors": Object {
    "email": null,
    "password": "too short",
  },
}
`;

exports[`UserSettings validate validates its fields 1`] = `
Object {
  "changed": false,
  "editingPassword": false,
  "edits": Object {
    "confirmPassword": "lalala",
    "email": "ra",
    "password": "rarara",
  },
  "errors": Object {
    "confirmPassword": "Passwords must match",
    "email": "Must be a valid email",
    "password": "Password must be at least 9 characters.",
  },
}
`;
