// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PostLabel renders 1`] = `
<View>
  <Text>
    REQUEST
  </Text>
</View>
`;

exports[`PostMenu returns a popupmenu when deleting allowed 1`] = `
<PopupMenuButton
  actions={
    Array [
      Array [
        "Delete This Post",
        [Function],
      ],
    ]
  }
  destructiveButtonIndex={0}
  hitSlop={
    Object {
      "bottom": 10,
      "left": 10,
      "right": 15,
      "top": 20,
    }
  }
>
  <Icon
    name="More"
  />
</PopupMenuButton>
`;

exports[`PostMenu returns a popupmenu when editing allowed 1`] = `
<PopupMenuButton
  actions={
    Array [
      Array [
        "Edit This Post",
        [Function],
      ],
    ]
  }
  destructiveButtonIndex={-1}
  hitSlop={
    Object {
      "bottom": 10,
      "left": 10,
      "right": 15,
      "top": 20,
    }
  }
>
  <Icon
    name="More"
  />
</PopupMenuButton>
`;

exports[`PostMenu returns a popupmenu when flagging allowed 1`] = `
<PopupMenuButton
  actions={
    Array [
      Array [
        "Flag This Post",
        [Function],
      ],
    ]
  }
  destructiveButtonIndex={0}
  hitSlop={
    Object {
      "bottom": 10,
      "left": 10,
      "right": 15,
      "top": 20,
    }
  }
>
  <Icon
    name="More"
  />
</PopupMenuButton>
`;

exports[`PostMenu returns a popupmenu when removePost 1`] = `
<PopupMenuButton
  actions={
    Array [
      Array [
        "Remove Post From Group",
        [Function],
      ],
    ]
  }
  destructiveButtonIndex={0}
  hitSlop={
    Object {
      "bottom": 10,
      "left": 10,
      "right": 15,
      "top": 20,
    }
  }
>
  <Icon
    name="More"
  />
</PopupMenuButton>
`;

exports[`PostMenu returns null when no actions 1`] = `null`;

exports[`renders correctly with a current user 1`] = `
<View>
  <View>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <Image
          source={
            Object {
              "uri": "foo.png",
            }
          }
        />
      </View>
    </View>
  </View>
  <View>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <Text>
        Zeus
      </Text>
      <Text>
        Go!
      </Text>
    </View>
    <View>
      <Text>
        10m ago
      </Text>
    </View>
  </View>
  <View>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 15,
          "top": 20,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <Icon
        name="More"
      />
    </View>
  </View>
</View>
`;

exports[`renders correctly with all=true, and no group or user 1`] = `
<View>
  <View>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <View>
        <Image
          source={
            Object {
              "uri": "foo.png",
            }
          }
        />
      </View>
    </View>
  </View>
  <View>
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <Text>
        Zeus
      </Text>
      <Text>
        Go!
      </Text>
    </View>
    <View>
      <Text>
        10m ago
      </Text>
      <RCTScrollView
        data={
          Array [
            Object {
              "name": "topic1",
            },
            Object {
              "name": "topic2",
            },
          ]
        }
        getItem={[Function]}
        getItemCount={[Function]}
        horizontal={true}
        keyExtractor={[Function]}
        onContentSizeChange={[Function]}
        onLayout={[Function]}
        onMomentumScrollBegin={[Function]}
        onMomentumScrollEnd={[Function]}
        onScroll={[Function]}
        onScrollBeginDrag={[Function]}
        onScrollEndDrag={[Function]}
        removeClippedSubviews={false}
        renderItem={[Function]}
        scrollEventThrottle={50}
        showsHorizontalScrollIndicator={false}
        stickyHeaderIndices={Array []}
        viewabilityConfigCallbackPairs={Array []}
      >
        <View>
          <View
            onLayout={[Function]}
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <Text>
                #
                topic1
              </Text>
            </View>
          </View>
          <View
            onLayout={[Function]}
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onClick={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
            >
              <Text>
                #
                topic2
              </Text>
            </View>
          </View>
        </View>
      </RCTScrollView>
    </View>
  </View>
  <View>
    <Icon
      name="Pin"
    />
    <View
      accessible={true}
      collapsable={false}
      focusable={true}
      hitSlop={
        Object {
          "bottom": 10,
          "left": 10,
          "right": 15,
          "top": 20,
        }
      }
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <Icon
        name="More"
      />
    </View>
  </View>
</View>
`;
