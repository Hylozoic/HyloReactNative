// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageRow calls showThread 1`] = `
<View>
  <View
    accessibilityComponentType={undefined}
    accessibilityLabel={undefined}
    accessibilityTraits={undefined}
    accessible={true}
    collapsable={undefined}
    hasTVPreferredFocus={undefined}
    hitSlop={undefined}
    isTVSelectable={true}
    nativeID={undefined}
    onLayout={undefined}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    testID={undefined}
    tvParallaxProperties={undefined}
  >
    <View>
      <View>
        <View>
          <Image
            source={
              Object {
                "uri": "blah",
              }
            }
          />
        </View>
      </View>
      <View>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
        >
          Test User
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          numberOfLines={2}
        >
          
          This is a message.
        </Text>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
        >
          
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`MessageRow renders correctly 1`] = `
<View>
  <TouchableOpacity
    activeOpacity={0.2}
    onPress={[Function]}
  >
    <ThreadCard
      currentUser={undefined}
      isLast={undefined}
      message={
        Array [
          Object {
            "creator": Object {
              "id": 1,
            },
            "id": 1,
          },
        ]
      }
      participants={
        Array [
          Object {
            "id": 2,
          },
        ]
      }
      unread={undefined}
    />
  </TouchableOpacity>
</View>
`;

exports[`ThreadList fetches threads initially when empty 1`] = `
<Text
  accessible={true}
  allowFontScaling={true}
  ellipsizeMode="tail"
>
  No active conversations
</Text>
`;

exports[`ThreadList handles pending correctly with threads 1`] = `
<View>
  <RCTScrollView
    data={
      Array [
        Object {
          "id": 1,
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    invertStickyHeaders={undefined}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={undefined}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={undefined}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshing={undefined}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
      >
        <View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID={undefined}
            tvParallaxProperties={undefined}
          />
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View
    collapsable={undefined}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        RECONNECTING...
      </Text>
    </View>
  </View>
</View>
`;

exports[`ThreadList handles pending correctly without threads 1`] = `<LoadingScreen />`;

exports[`ThreadList handles when there are no threads correctly 1`] = `
<Text
  accessible={true}
  allowFontScaling={true}
  ellipsizeMode="tail"
>
  No active conversations
</Text>
`;

exports[`ThreadList renders correctly 1`] = `
<View>
  <RCTScrollView
    data={
      Array [
        Object {
          "id": 1,
          "lastMessage": Object {
            "id": 1,
          },
          "participants": Array [
            Object {
              "avatarUrl": "blah",
              "id": 1,
            },
          ],
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    invertStickyHeaders={undefined}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReached={undefined}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={undefined}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshing={undefined}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
      >
        <View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID={undefined}
            tvParallaxProperties={undefined}
          />
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View
    collapsable={undefined}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      collapsable={undefined}
      hasTVPreferredFocus={undefined}
      hitSlop={undefined}
      isTVSelectable={true}
      nativeID={undefined}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        RECONNECTING...
      </Text>
    </View>
  </View>
</View>
`;

exports[`ThreadList sets the navigationOptions 1`] = `
Object {
  "headerBackTitle": null,
  "headerLeft": <HeaderButton
    onPress={[Function]}
    text="Close"
  />,
  "headerRight": <HeaderButton
    onPress={[Function]}
    text="New"
  />,
  "headerStyle": Object {
    "backgroundColor": "white",
    "paddingHorizontal": 10,
  },
  "headerTintColor": "#808c9b",
  "headerTitle": "Messages",
  "headerTitleStyle": Array [
    Object {
      "color": "black",
      "fontFamily": "Circular-Bold",
      "fontSize": 17,
    },
    Object {
      "alignSelf": "center",
      "flex": 1,
      "textAlign": "center",
    },
  ],
}
`;
