// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MessageRow calls showThread 1`] = `
<View>
  <View
    accessible={true}
    focusable={true}
    onClick={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderRelease={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
  >
    <View>
      <View>
        <View>
          <Image
            source={
              Object {
                "uri": "blah",
              }
            }
          />
        </View>
      </View>
      <View>
        <Text>
          Test User
        </Text>
        <Text
          numberOfLines={2}
        >
          
          This is a message.
        </Text>
        <Text>
          
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`MessageRow renders correctly 1`] = `
<View>
  <ForwardRef
    onPress={[Function]}
  >
    <ThreadCard
      message={
        Array [
          Object {
            "creator": Object {
              "id": 1,
            },
            "id": 1,
          },
        ]
      }
      participants={
        Array [
          Object {
            "id": 2,
          },
        ]
      }
    />
  </ForwardRef>
</View>
`;

exports[`ThreadList fetches threads initially when empty 1`] = `
<Text>
  No active conversations
</Text>
`;

exports[`ThreadList handles pending correctly with threads 1`] = `
<View>
  <RCTScrollView
    data={
      Array [
        Object {
          "id": 1,
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
      >
        <View>
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          />
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View>
    <View
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <Text>
        RECONNECTING...
      </Text>
    </View>
  </View>
</View>
`;

exports[`ThreadList handles pending correctly without threads 1`] = `<LoadingScreen />`;

exports[`ThreadList handles when there are no threads correctly 1`] = `
<Text>
  No active conversations
</Text>
`;

exports[`ThreadList renders correctly 1`] = `
<View>
  <RCTScrollView
    data={
      Array [
        Object {
          "id": 1,
          "lastMessage": Object {
            "id": 1,
          },
          "participants": Array [
            Object {
              "avatarUrl": "blah",
              "id": 1,
            },
          ],
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
      >
        <View>
          <View
            accessible={true}
            focusable={true}
            onClick={[Function]}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
          />
        </View>
      </View>
    </View>
  </RCTScrollView>
  <View>
    <View
      accessible={true}
      focusable={false}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
    >
      <Text>
        RECONNECTING...
      </Text>
    </View>
  </View>
</View>
`;

exports[`ThreadList sets the navigationOptions 1`] = `
Object {
  "headerBackTitle": null,
  "headerLeft": <HeaderButton
    disableOnClick={true}
    onPress={[Function]}
    text="Close"
  />,
  "headerRight": <HeaderButton
    disableOnClick={false}
    onPress={[Function]}
    text="New"
  />,
  "headerStyle": Object {
    "backgroundColor": "white",
    "paddingHorizontal": 10,
  },
  "headerTintColor": "#808c9b",
  "headerTitle": "Messages",
  "headerTitleStyle": Array [
    Object {
      "color": "black",
      "fontFamily": "Circular-Bold",
      "fontSize": 17,
    },
    Object {
      "alignSelf": "center",
      "flex": 1,
      "textAlign": "center",
    },
  ],
}
`;
