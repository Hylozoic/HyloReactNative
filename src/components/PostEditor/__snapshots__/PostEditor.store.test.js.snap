// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createPost should match the last snapshot 1`] = `
Object {
  "graphql": Object {
    "query": "mutation (
        $type: String
        $title: String
        $details: String
        $communityIds: [String]
        $imageUrls: [String]
        $fileUrls: [String]
        $announcement: Boolean
        $topicNames: [String]
        $memberIds: [ID]        
      ) {
        createPost(data: {
          type: $type
          title: $title
          details: $details
          communityIds: $communityIds
          imageUrls: $imageUrls
          fileUrls: $fileUrls
          announcement: $announcement
          topicNames: $topicNames
          memberIds: $memberIds
        }) {
          
  id
  title
  details
  type
  location
  announcement
  creator {
    id
    name
    avatarUrl
    tagline
  }
  createdAt
  updatedAt
  commenters(first: 3) {
    id
    name
    avatarUrl
  }
  commentersTotal
  commentsTotal
  
  linkPreview {
    title
    url
    imageUrl
  }
  votesTotal
  myVote
  communities {
    id
    name
    slug
  }
  attachments {
    id
    position
    type
    url
  }
  postMemberships {
    id
    pinned
    community {
      id
    }
  }
  topics {
    id
    name
    postsTotal
    followersTotal
  }
  members {
    items {
      id
      name
      avatarUrl
    }
    total
  }
        }
      }",
    "variables": Object {
      "announcement": undefined,
      "communityIds": Array [
        undefined,
      ],
      "details": "details",
      "fileUrls": Array [],
      "imageUrls": Array [],
      "memberIds": Array [],
      "title": "title",
      "topicNames": Array [],
      "type": "post",
    },
  },
  "meta": Object {
    "analytics": Object {
      "detailsLength": 7,
      "eventName": "Post Created",
      "isAnnouncement": undefined,
    },
    "extractModel": "Post",
  },
  "type": "PostEditor/CREATE_POST",
}
`;

exports[`createProject should match the last snapshot 1`] = `
Object {
  "graphql": Object {
    "query": "mutation (
        $type: String
        $title: String
        $details: String
        $communityIds: [String]
        $imageUrls: [String]
        $fileUrls: [String]
        $announcement: Boolean
        $topicNames: [String]
        $memberIds: [ID]        
      ) {
        createPost(data: {
          type: $type
          title: $title
          details: $details
          communityIds: $communityIds
          imageUrls: $imageUrls
          fileUrls: $fileUrls
          announcement: $announcement
          topicNames: $topicNames
          memberIds: $memberIds
        }) {
          
  id
  title
  details
  type
  location
  announcement
  creator {
    id
    name
    avatarUrl
    tagline
  }
  createdAt
  updatedAt
  commenters(first: 3) {
    id
    name
    avatarUrl
  }
  commentersTotal
  commentsTotal
  
  linkPreview {
    title
    url
    imageUrl
  }
  votesTotal
  myVote
  communities {
    id
    name
    slug
  }
  attachments {
    id
    position
    type
    url
  }
  postMemberships {
    id
    pinned
    community {
      id
    }
  }
  topics {
    id
    name
    postsTotal
    followersTotal
  }
  members {
    items {
      id
      name
      avatarUrl
    }
    total
  }
        }
      }",
    "variables": Object {
      "announcement": undefined,
      "communityIds": Array [
        undefined,
      ],
      "details": "details",
      "fileUrls": Array [],
      "imageUrls": Array [],
      "memberIds": Array [
        1,
        2,
        3,
      ],
      "title": "title",
      "topicNames": Array [],
      "type": "post",
    },
  },
  "meta": Object {
    "analytics": Object {
      "detailsLength": 7,
      "eventName": "Post Created",
      "isAnnouncement": undefined,
    },
    "extractModel": "Post",
  },
  "type": "PostEditor/CREATE_POST",
}
`;

exports[`fetchDetailsAndMembers should match the last snapshot 1`] = `
Object {
  "graphql": Object {
    "query": "query ($id: ID) {
        post(id: $id) {
          id
          detailsText
          members {
            total
            hasMore
            items {
              id
              name
              avatarUrl
            }
          }
        }
      }",
    "variables": Object {
      "id": 1,
    },
  },
  "meta": Object {
    "extractModel": "Post",
  },
  "type": "PostEditor/FETCH_DETAILS_AND_MEMBERS",
}
`;

exports[`updatePost should match the last snapshot 1`] = `
Object {
  "graphql": Object {
    "query": "mutation ($id: ID
        $type: String
        $title: String
        $details: String
        $communityIds: [String]
        $imageUrls: [String]
        $fileUrls: [String]
        $topicNames: [String]
        $memberIds: [ID]        
      ) {
        updatePost(id: $id, data: {
          type: $type
          title: $title
          details: $details
          communityIds: $communityIds
          imageUrls: $imageUrls
          fileUrls: $fileUrls
          topicNames: $topicNames
          memberIds: $memberIds
        }) {
          
  id
  title
  details
  type
  location
  announcement
  creator {
    id
    name
    avatarUrl
    tagline
  }
  createdAt
  updatedAt
  commenters(first: 3) {
    id
    name
    avatarUrl
  }
  commentersTotal
  commentsTotal
  comments(first: 10, order: \\"desc\\") {
    items {
      id
      text
      creator {
        id
        name
        avatarUrl
      }
      createdAt
    }
    total
    hasMore
  }
  linkPreview {
    title
    url
    imageUrl
  }
  votesTotal
  myVote
  communities {
    id
    name
    slug
  }
  attachments {
    id
    position
    type
    url
  }
  postMemberships {
    id
    pinned
    community {
      id
    }
  }
  topics {
    id
    name
    postsTotal
    followersTotal
  }
  members {
    items {
      id
      name
      avatarUrl
    }
    total
  }
        }
      }",
    "variables": Object {
      "communityIds": Array [
        undefined,
      ],
      "details": "details",
      "fileUrls": Array [],
      "id": 1,
      "imageUrls": Array [],
      "memberIds": Array [],
      "title": "title",
      "topicNames": Array [],
      "type": "post",
    },
  },
  "meta": Object {
    "analytics": Object {
      "detailsLength": 7,
      "eventName": "Post Updated",
    },
    "extractModel": Object {
      "append": false,
      "getRoot": [Function],
      "modelName": "Post",
    },
  },
  "type": "PostEditor/UPDATE_POST",
}
`;
