// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`AllCommunitiesSettingsRow matches the last snapshot 1`] = `
<SettingsRow
  imageSrc={
    Object {
      "testUri": "../../../src/assets/hylo-merkaba.png",
    }
  }
  name="All Communities"
  settings={
    Object {
      "sendEmail": true,
    }
  }
  update={[Function]}
/>
`;

exports[`MembershipSettingsRow matches the last snapshot 1`] = `
<SettingsRow
  imageUrl="foo.png"
  name="Foomunity"
  settings={
    Object {
      "sendEmail": true,
    }
  }
  update={[Function]}
/>
`;

exports[`MessageSettingsRow matches the last snapshot 1`] = `
<SettingsRow
  iconName="Messages"
  name="Messages"
  settings={
    Object {
      "sendEmail": true,
    }
  }
  update={[Function]}
/>
`;

exports[`NotificationSettings has navigationOptions 1`] = `
Object {
  "headerBackTitle": null,
  "headerStyle": Object {
    "backgroundColor": "white",
    "paddingHorizontal": 10,
  },
  "headerTintColor": "#808c9b",
  "headerTitle": "Notification Settings",
  "headerTitleStyle": Object {
    "color": "black",
    "fontFamily": "Circular-Bold",
    "fontSize": 17,
  },
}
`;

exports[`NotificationSettings matches snapshot with state set 1`] = `
<View
  enabled={true}
  keyboardVerticalOffset={64}
  onLayout={[Function]}
>
  <RCTScrollView
    contentContainerStyle={
      Object {
        "flexGrow": 1,
      }
    }
  >
    <View>
      <SettingControl
        autoCapitalize="none"
        autoCorrect={false}
        error="bad email"
        keyboardType="email-address"
        label="EMAIL"
        onChange={[Function]}
        theme={
          Object {
            "control": Object {
              "marginBottom": 3,
            },
            "error": Object {
              "paddingBottom": 10,
              "paddingVertical": 0,
            },
            "hideErrorTriangle": true,
            "label": Object {
              "color": "#c0c6cd",
              "fontFamily": "Circular-Bold",
              "fontSize": 10,
              "marginBottom": 10,
            },
            "textInput": Object {
              "borderBottomColor": "#c0c6cd",
              "borderBottomWidth": 0.5,
              "color": "#56667a",
              "fontFamily": "Circular-Book",
              "fontSize": 16,
            },
          }
        }
        value="aa@bbb.com"
      />
      <SettingControl
        autoCapitalize="none"
        autoCorrect={false}
        error="needs to be longer"
        label="PASSWORD"
        onChange={[Function]}
        theme={
          Object {
            "control": Object {
              "marginBottom": 3,
            },
            "error": Object {
              "paddingBottom": 10,
              "paddingVertical": 0,
            },
            "hideErrorTriangle": true,
            "label": Object {
              "color": "#c0c6cd",
              "fontFamily": "Circular-Bold",
              "fontSize": 10,
              "marginBottom": 10,
            },
            "textInput": Object {
              "borderBottomColor": "#c0c6cd",
              "borderBottomWidth": 0.5,
              "color": "#56667a",
              "fontFamily": "Circular-Book",
              "fontSize": 16,
            },
          }
        }
        toggleSecureTextEntry={true}
        value="hunkjnkjn"
      />
      <SettingControl
        autoCapitalize="none"
        autoCorrect={false}
        error="needs to match"
        label="CONFIRM PASSWORD"
        onChange={[Function]}
        theme={
          Object {
            "control": Object {
              "marginBottom": 3,
            },
            "error": Object {
              "paddingBottom": 10,
              "paddingVertical": 0,
            },
            "hideErrorTriangle": true,
            "label": Object {
              "color": "#c0c6cd",
              "fontFamily": "Circular-Bold",
              "fontSize": 10,
              "marginBottom": 10,
            },
            "textInput": Object {
              "borderBottomColor": "#c0c6cd",
              "borderBottomWidth": 0.5,
              "color": "#56667a",
              "fontFamily": "Circular-Book",
              "fontSize": 16,
            },
          }
        }
        toggleSecureTextEntry={true}
        value="fkldsflkjdf"
      />
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        collapsable={undefined}
        hasTVPreferredFocus={undefined}
        hitSlop={undefined}
        isTVSelectable={true}
        nativeID={undefined}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
        >
          Cancel Password Change
        </Text>
      </View>
      <View>
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
        >
          SOCIAL ACCOUNTS
        </Text>
        <View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Facebook
          </Text>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              Unlink
            </Text>
          </View>
        </View>
        <View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Twitter
          </Text>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <Text
              accessible={true}
              allowFontScaling={true}
              ellipsizeMode="tail"
            >
              Unlink
            </Text>
          </View>
        </View>
      </View>
      <View>
        <View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View>
              <View>
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                >
                  Save Changes
                </Text>
              </View>
            </View>
          </View>
        </View>
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            Cancel
          </Text>
        </View>
        <View>
          <View
            accessibilityComponentType={undefined}
            accessibilityLabel={undefined}
            accessibilityTraits={undefined}
            accessible={true}
            collapsable={undefined}
            hasTVPreferredFocus={undefined}
            hitSlop={undefined}
            isTVSelectable={true}
            nativeID={undefined}
            onLayout={undefined}
            onResponderGrant={[Function]}
            onResponderMove={[Function]}
            onResponderRelease={[Function]}
            onResponderTerminate={[Function]}
            onResponderTerminationRequest={[Function]}
            onStartShouldSetResponder={[Function]}
            testID={undefined}
            tvParallaxProperties={undefined}
          >
            <View>
              <View>
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                >
                  Logout
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`NotificationSettings matches the last snapshot 1`] = `
<ScrollView
  contentContainerStyle={
    Object {
      "marginTop": 30,
    }
  }
>
  <MessageSettingsRow
    settings={
      Object {
        "sendEmail": true,
        "sendPushNotifications": false,
      }
    }
    updateMessageSettings={[Function]}
  />
  <AllCommunitiesSettingsRow
    settings={
      Object {
        "sendEmail": false,
        "sendPushNotifications": true,
      }
    }
    updateAllCommunities={[Function]}
  />
  <MembershipSettingsRow
    membership={
      Object {
        "community": Object {
          "avatarUrl": "foo1.png",
          "id": 12,
        },
        "id": 11,
        "settings": Object {
          "sendEmail": true,
          "sendPushNotifications": false,
        },
      }
    }
    updateMembershipSettings={[Function]}
  />
  <MembershipSettingsRow
    membership={
      Object {
        "community": Object {
          "avatarUrl": "foo2.png",
          "id": 22,
        },
        "id": 21,
        "settings": Object {
          "sendEmail": false,
          "sendPushNotifications": true,
        },
      }
    }
    updateMembershipSettings={[Function]}
  />
</ScrollView>
`;

exports[`NotificationSettings updateField sets the state 1`] = `
Object {
  "changed": true,
  "editingPassword": false,
  "edits": Object {
    "email": "newemail",
    "password": "ldlkd",
  },
  "errors": Object {
    "email": null,
    "password": "too short",
  },
}
`;

exports[`SettingsIcon matches the last snapshot 1`] = `
<TouchableOpacity
  activeOpacity={0.2}
  onPress={[Function]}
>
  <Icon
    name="FooRow"
  />
</TouchableOpacity>
`;

exports[`SettingsRow matches snapshot when expanded 1`] = `
<View>
  <ActivityIndicator
    animating={true}
    color="#999999"
    hidesWhenStopped={true}
    size="small"
  />
</View>
`;

exports[`SettingsRow matches the last snapshot 1`] = `
<View>
  <View>
    <Image
      source={
        Object {
          "uri": "foo.png",
        }
      }
    />
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      numberOfLines={1}
    >
      Foo Row
    </Text>
    <TouchableOpacity
      activeOpacity={0.2}
      onPress={[Function]}
    >
      <Icon
        name="ArrowDown"
      />
    </TouchableOpacity>
  </View>
</View>
`;

exports[`SettingsRow matches the last snapshot with iconName 1`] = `
<View>
  <View>
    <Icon
      name="iconname"
    />
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
      numberOfLines={1}
    >
      Foo Row
    </Text>
    <TouchableOpacity
      activeOpacity={0.2}
      onPress={[Function]}
    >
      <Icon
        name="ArrowDown"
      />
    </TouchableOpacity>
  </View>
</View>
`;
